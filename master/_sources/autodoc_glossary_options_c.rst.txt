
.. include:: autodoc_abbr_options_c.rst


.. _`apdx:options_c_alpha`:

Keywords by Alpha
=================

.. glossary::
   :sorted:

   ACTIVE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array giving the number of active orbitals (occupied plus unoccupied) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords)

      * **Type**: array
      * **Default**: No Default

   BASIS_RELATIVISTIC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis.

      * **Type**: string
      * **Default**: No Default

   BENCH (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Some codes (DFT) can dump benchmarking data to separate output files

      * **Type**: integer
      * **Default**: 0

   BRIANQC_ENABLE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Whether to enable using the BrianQC GPU module

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_TYPE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF, REMP). See :ref:`Cross-module Redundancies <table:managedmethods>` for details.

      * **Type**: string
      * **Possible Values**: DF, CONV, CD
      * **Default**: CONV

   CI_TYPE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Algorithm to use for CI computation (e.g., CID or CISD). See :ref:`Cross-module Redundancies <table:managedmethods>` for details.

      * **Type**: string
      * **Possible Values**: CONV
      * **Default**: CONV

   CUBEPROP_BASIS_FUNCTIONS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty.

      * **Type**: array
      * **Default**: No Default

   CUBEPROP_FILEPATH (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Directory to which to write cube files. Default is the input file directory.

      * **Type**: string
      * **Default**: No Default

   CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Fraction of density captured by adaptive isocontour values

      * **Type**: double
      * **Default**: 0.85

   CUBEPROP_ORBITALS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| List of orbital indices for which cube files are generated (1-based, :math:`+` for alpha, :math:`-` for beta). All orbitals computed if empty.

      * **Type**: array
      * **Default**: No Default

   CUBEPROP_TASKS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Properties to compute. Valid tasks include: ``DENSITY`` - Da, Db, Dt, Ds; ``ESP`` - Dt, ESP; ``ORBITALS`` - Psi_a_N, Psi_b_N; ``BASIS_FUNCTIONS`` - Phi_N; ``LOL`` - LOLa, LOLb; ``ELF`` - ELFa, ELFb; ``FRONTIER_ORBITALS`` - Psi_a_N_HOMO + Psi_a_N_LUMO; ``DUAL_DESCRIPTOR`` - DUAL_N_HOMO-M_LUMO.

      * **Type**: array
      * **Default**: No Default

   CUBIC_GRID_OVERAGE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each.

      * **Type**: array
      * **Default**: No Default

   CUBIC_GRID_SPACING (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each.

      * **Type**: array
      * **Default**: No Default

   DDX (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| DDX boolean for ddx module

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DF_BASIS_CC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| The density fitting basis to use in coupled cluster computations.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array containing the number of doubly-occupied orbitals per irrep (in Cotton order)

      * **Type**: array
      * **Default**: No Default

   FREEZE_CORE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Specifies how many core orbitals to freeze in correlated computations. ``TRUE`` or ``1`` will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With ``FALSE`` or ``0``, no electrons are frozen (with the exception of electrons treated by an ECP). With ``-1``, ``-2``, and ``-3``, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords |globals__num_frozen_docc| (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or |globals__frozen_docc| (gives the number of orbitals to freeze per irreducible representation) or by the option ``POLICY`` in combination with appropriate inputs to |globals__freeze_core_policy|. At present, ``POLICY`` is an experimental option and is subject to change.

      * **Type**: string
      * **Possible Values**: FALSE, TRUE, 1, 0, -1, -2, -3, POLICY
      * **Default**: FALSE

   FREEZE_CORE_POLICY (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| NOTE: This is an experimental feature and subject to change! Specifies a custom frozen-core policy on a per-element basis. Input should be a list of integers representing the number of orbitals to freeze for each atomic number MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be should have 0 frozen orbitals, B-Mg should have 1, and Al should have 2, you would provide the input ``[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]``. Please make sure to fill in the list up to the highest atomic number included in any calculations. This option is only used if |globals__freeze_core| is set to ``POLICY``.

      * **Type**: array
      * **Default**: No Default

   FROZEN_DOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps |globals__num_frozen_docc| and |globals__freeze_core|.

      * **Type**: array
      * **Default**: No Default

   FROZEN_UOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps |globals__num_frozen_uocc|.

      * **Type**: array
      * **Default**: No Default

   INTEGRAL_PACKAGE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise.

      * **Type**: string
      * **Possible Values**: ERD, LIBINT1, SIMINT, LIBINT2
      * **Default**: LIBINT2

   LITERAL_CFOUR (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through ``cfour {...}`` block.

      * **Type**: string
      * **Default**: No Default

   MAX_RADIAL_MOMENT (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Maximum Radial Moment to Calculate

      * **Type**: integer
      * **Default**: 4

   MBIS_D_CONVERGENCE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| MBIS Convergence Criteria

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-8

   MBIS_MAXITER (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Maximum Number of MBIS Iterations

      * **Type**: integer
      * **Default**: 500

   MBIS_PRUNING_SCHEME (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Pruning scheme for MBIS Grid

      * **Type**: string
      * **Default**: ROBUST

   MBIS_RADIAL_POINTS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| MBIS Number of Radial Points

      * **Type**: integer
      * **Default**: 75

   MBIS_SPHERICAL_POINTS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| MBIS Number of Spherical Points

      * **Type**: integer
      * **Default**: 302

   MOLDEN_WITH_VIRTUAL (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   MP2_TYPE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Algorithm to use for MP2 computation. See :ref:`Cross-module Redundancies <table:managedmethods>` for details.

      * **Type**: string
      * **Possible Values**: DF, CONV, CD
      * **Default**: DF

   MP_TYPE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Algorithm to use for MPn ( :math:`n>2` ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See :ref:`Cross-module Redundancies <table:managedmethods>` for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF.

      * **Type**: string
      * **Possible Values**: DF, CONV, CD
      * **Default**: CONV

   NUM_FROZEN_DOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| The number of core orbitals to freeze in later correlated computations. This trumps |globals__freeze_core|.

      * **Type**: integer
      * **Default**: 0

   NUM_FROZEN_UOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| The number of virtual orbitals to freeze in later correlated computations.

      * **Type**: integer
      * **Default**: 0

   PCM (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| PCM boolean for pcmsolver module

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| PE boolean for polarizable embedding module

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PRINT (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information.

      * **Type**: integer
      * **Default**: 1

   PRINT_NOONS (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| How many NOONS to print -- used in libscf_solver/uhf.cc and libmints/oeprop.cc

      * **Type**: string
      * **Default**: 3

   PROPERTIES (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| List of properties to compute

      * **Type**: array
      * **Default**: No Default

   PROPERTIES_ORIGIN (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Either :ref:`a set of 3 coordinates or a string <table:oe_origin>` describing the origin about which one-electron properties are computed.

      * **Type**: array
      * **Default**: No Default

   PUREAM (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. **Cfour Interface:** Keyword translates into |cfour__cfour_spherical|.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   QC_MODULE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| When several modules can compute the same methods and the default routing is not suitable, this targets a module. ``CCENERGY`` covers CCHBAR, etc. ``OCC`` covers OCC and DFOCC.

      * **Type**: string
      * **Possible Values**: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC
      * **Default**: No Default

   RESTRICTED_DOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF)

      * **Type**: array
      * **Default**: No Default

   RESTRICTED_UOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)

      * **Type**: array
      * **Default**: No Default

   SCF_TYPE (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| What algorithm to use for the SCF computation. See Table :ref:`SCF Convergence & Algorithm <table:conv_scf>` for default algorithm for different calculation types.

      * **Type**: string
      * **Possible Values**: DIRECT, DF, MEM\_DF, DISK\_DF, PK, OUT\_OF\_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX, DFDIRJ+LINK
      * **Default**: PK

   SCREENING (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| The type of screening used when computing two-electron integrals.

      * **Type**: string
      * **Possible Values**: SCHWARZ, CSAM, DENSITY, NONE
      * **Default**: CSAM

   SOCC (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| An array containing the number of singly-occupied orbitals per irrep (in Cotton order). The value of |globals__docc| should also be set.

      * **Type**: array
      * **Default**: No Default

   WRITER_FILE_LABEL (GLOBALS)
      :ref:`apdx:GLOBALS` |w---w| Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive.

      * **Type**: string
      * **Default**: No Default

   CUTOFF_AMPS_PRINT (ADC)
      :ref:`apdx:ADC` |w---w| Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend.

      * **Type**: double
      * **Default**: 0.01

   GAUGE (ADC)
      :ref:`apdx:ADC` |w---w| Specifies the choice of representation of the electric dipole operator. * Acceptable values are ``LENGTH`` (default) and ``VELOCITY``.

      * **Type**: string
      * **Possible Values**: LENGTH, VELOCITY
      * **Default**: LENGTH

   KIND (ADC)
      :ref:`apdx:ADC` |w---w| The kind of states to compute.

      * **Type**: string
      * **Possible Values**: SINGLET, TRIPLET, SPIN\_FLIP, ANY
      * **Default**: SINGLET

   MAXITER (ADC)
      :ref:`apdx:ADC` |w---w| Maximum number of iterations

      * **Type**: integer
      * **Default**: 50

   MAX_NUM_VECS (ADC)
      :ref:`apdx:ADC` |w---w| Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend.

      * **Type**: integer
      * **Default**: -1

   NUM_CORE_ORBITALS (ADC)
      :ref:`apdx:ADC` |w---w| Number of orbitals to place in the core. This option is only available for the adcc backend.

      * **Type**: integer
      * **Default**: 0

   NUM_GUESSES (ADC)
      :ref:`apdx:ADC` |w---w| Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend.

      * **Type**: integer
      * **Default**: -1

   REFERENCE (ADC)
      :ref:`apdx:ADC` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: RHF, UHF
      * **Default**: RHF

   ROOTS_PER_IRREP (ADC)
      :ref:`apdx:ADC` |w---w| The number of poles / excited states to obtain per irrep vector

      * **Type**: array
      * **Default**: No Default

   R_CONVERGENCE (ADC)
      :ref:`apdx:ADC` |w---w| Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6)

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: -1

   AO_BASIS (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| The algorithm to use for the :math:`\left\langle VV||VV\right \rangle` terms

      * **Type**: string
      * **Possible Values**: NONE, DISK, DIRECT
      * **Default**: NONE

   CACHELEVEL (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| The amount of caching of data to perform

      * **Type**: integer
      * **Default**: 2

   DEBUG (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Reproducing energies from densities ?

      * **Type**: integer
      * **Default**: 0

   GAUGE (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| The type of gauge to use for properties

      * **Type**: string
      * **Default**: LENGTH

   INTS_TOLERANCE (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-14

   OPDM_RELAX (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Do relax the one-particle density matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PROP_ALL (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Compute non-relaxed properties for all excited states.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PROP_ROOT (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Root number (within its irrep) for computing properties

      * **Type**: integer
      * **Default**: 1

   PROP_SYM (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| The symmetry of states

      * **Type**: integer
      * **Default**: 1

   REFERENCE (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Reference wavefunction type

      * **Type**: string
      * **Default**: RHF

   ROOTS_PER_IRREP (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| The number of electronic states to computed, per irreducible representation

      * **Type**: array
      * **Default**: No Default

   WRITE_NOS (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Do write natural orbitals (molden)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   XI (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Do compute Xi?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ZETA (CCDENSITY)
      :ref:`apdx:CCDENSITY` |w---w| Do use zeta?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ABCD (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Type of ABCD algorithm will be used

      * **Type**: string
      * **Possible Values**: NEW, OLD
      * **Default**: NEW

   ANALYZE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do analyze T2 amplitudes

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   BCCD_MAXITER (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Maximum number of iterations for Brueckner CCD.

      * **Type**: integer
      * **Default**: 50

   BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest :math:`T_1` amplitude. Default adjusts depending on |ccenergy__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   CACHELEVEL (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., :math:`\langle ij | ab \rangle` integrals) may be held in the cache.

      * **Type**: integer
      * **Default**: 2

   CACHETYPE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of ``LOW`` selects a "low priority" scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a "least recently used" scheme in which the oldest item in the cache will be the first one deleted.

      * **Type**: string
      * **Possible Values**: LOW, LRU
      * **Default**: LOW

   CC_NUM_THREADS (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Number of threads

      * **Type**: integer
      * **Default**: 1

   CC_OS_SCALE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Coupled-cluster opposite-spin scaling value

      * **Type**: double
      * **Default**: 1.27

   CC_SS_SCALE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Coupled-cluster same-spin scaling value

      * **Type**: double
      * **Default**: 1.13

   DIIS (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do use DIIS extrapolation to accelerate convergence?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   E_CONVERGENCE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   LOCAL (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do simulate the effects of local correlation techniques?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_CPHF_CUTOFF (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Cutoff value for local-coupled-perturbed-Hartree-Fock

      * **Type**: double
      * **Default**: 0.10

   LOCAL_CUTOFF (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

      * **Type**: double
      * **Default**: 0.02

   LOCAL_METHOD (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Type of local-CCSD scheme to be simulated. ``WERNER`` selects the method developed by H.-J. Werner and co-workers, and ``AOBASIS`` selects the method developed by G.E. Scuseria and co-workers (currently inoperative).

      * **Type**: string
      * **Possible Values**: WERNER, AOBASIS
      * **Default**: WERNER

   LOCAL_PAIRDEF (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Definition of local pair domains, default is BP, Boughton-Pulay.

      * **Type**: string
      * **Possible Values**: BP, RESPONSE
      * **Default**: BP

   LOCAL_WEAKP (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Desired treatment of "weak pairs" in the local-CCSD method. A value of ``NEGLECT`` ignores weak pairs entirely. A value of ``NONE`` treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored.

      * **Type**: string
      * **Possible Values**: NONE, NEGLECT, MP2
      * **Default**: NONE

   MAXITER (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Maximum number of iterations to solve the CC equations

      * **Type**: integer
      * **Default**: 50

   MP2_AMPS_PRINT (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MP2_OS_SCALE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| MP2 opposite-spin scaling value

      * **Type**: double
      * **Default**: 1.20

   MP2_SS_SCALE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| MP2 same-spin scaling value

      * **Type**: double
      * **Default**: 1.0

   NEW_TRIPLES (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do use new triples?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NUM_AMPS_PRINT (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Number of important :math:`t_1` and :math:`t_2` amplitudes to print

      * **Type**: integer
      * **Default**: 10

   PAIR_ENERGIES_PRINT (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do print MP2 and CCSD pair energies for RHF references?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PROPERTY (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| The response property desired. Acceptable values are ``POLARIZABILITY`` (default) for dipole-polarizabilities, ``ROTATION`` for specific rotations, ``ROA`` for Raman Optical Activity, and ``ALL`` for all of the above.

      * **Type**: string
      * **Possible Values**: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL
      * **Default**: POLARIZABILITY

   REFERENCE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: RHF, ROHF, UHF
      * **Default**: RHF

   RESTART (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do restart the coupled-cluster iterations from old :math:`t_1` and :math:`t_2` amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   R_CONVERGENCE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Convergence criterion for wavefunction (change) in CC amplitude equations.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   SCSN_MP2 (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do SCS-MP2 with parameters optimized for nucleic acids?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SCS_CCSD (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do spin-component-scaled CCSD

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SCS_MP2 (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do spin-component-scaled MP2 (SCS-MP2)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SEMICANONICAL (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Convert ROHF MOs to semicanonical MOs

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   T2_COUPLED (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   T3_WS_INCORE (CCENERGY)
      :ref:`apdx:CCENERGY` |w---w| Do build W intermediates required for cc3 in core memory?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ABCD (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Type of ABCD algorithm will be used

      * **Type**: string
      * **Possible Values**: NEW, OLD
      * **Default**: NEW

   CACHELEVEL (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., :math:`\left\langle ij | ab \right\rangle` integrals) may be held in the cache.

      * **Type**: integer
      * **Default**: 2

   CACHETYPE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| The criterion used to retain/release cached data

      * **Type**: string
      * **Possible Values**: LOW, LRU
      * **Default**: LRU

   CC3_FOLLOW_ROOT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do turn on root following for CC3

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_NUM_THREADS (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Number of threads

      * **Type**: integer
      * **Default**: 1

   COLLAPSE_WITH_LAST (CCEOM)
      :ref:`apdx:CCEOM` |w---w| When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   COLLAPSE_WITH_LAST_CC3 (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Has the same effect as "COLLAPSE_WITH_LAST" but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   COMPLEX_TOLERANCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Complex tolerance applied in CCEOM computations

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-12

   EOM_GUESS (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = ``SINGLES``, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = ``DISK``, guess vectors from a previous computation will be read from disk. If EOM_GUESS = ``INPUT``, guess vectors will be specified in user input. The latter method is not currently available.

      * **Type**: string
      * **Possible Values**: SINGLES, DISK, INPUT
      * **Default**: SINGLES

   EOM_REFERENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Reference wavefunction type for EOM computations

      * **Type**: string
      * **Possible Values**: RHF, ROHF, UHF
      * **Default**: RHF

   E_CONVERGENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   FULL_MATRIX (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do use full effective Hamiltonian matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do simulate the effects of local correlation techniques?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_CUTOFF (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

      * **Type**: double
      * **Default**: 0.02

   LOCAL_DO_SINGLES (CCEOM)
      :ref:`apdx:CCEOM` |w---w| 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   LOCAL_FILTER_SINGLES (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do apply local filtering to singles amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   LOCAL_METHOD (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Type of local-CCSD scheme to be simulated. ``WERNER`` selects the method developed by H.-J. Werner and co-workers, and ``AOBASIS`` selects the method developed by G.E. Scuseria and co-workers (currently inoperative).

      * **Type**: string
      * **Possible Values**: WERNER, AOBASIS
      * **Default**: WERNER

   LOCAL_PRECONDITIONER (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Preconditioner will be used in local CC computations

      * **Type**: string
      * **Possible Values**: HBAR, FOCK
      * **Default**: HBAR

   LOCAL_WEAKP (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Desired treatment of "weak pairs" in the local-CCSD method. A value of ``NEGLECT`` ignores weak pairs entirely. A value of ``NONE`` treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored.

      * **Type**: string
      * **Possible Values**: NONE, MP2, NEGLECT
      * **Default**: NONE

   MAXITER (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Maximum number of iterations

      * **Type**: integer
      * **Default**: 80

   NEW_TRIPLES (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do use new triples?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NUM_AMPS_PRINT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Number of important CC amplitudes to print

      * **Type**: integer
      * **Default**: 5

   OVERLAP_CHECK (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PROP_ROOT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Root number (within its irrep) for computing properties. Defaults to highest root requested.

      * **Type**: integer
      * **Default**: 0

   PROP_SYM (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Symmetry of the state to compute properties. Defaults to last irrep for which states are requested.

      * **Type**: integer
      * **Default**: 1

   REFERENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: RHF, ROHF, UHF
      * **Default**: RHF

   RESTART_EOM_CC3 (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do restart from on-disk?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RHF_TRIPLETS (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do form a triplet state from RHF reference?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ROOTS_PER_IRREP (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition.

      * **Type**: array
      * **Default**: No Default

   R_CONVERGENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-3

   SEMICANONICAL (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Convert ROHF MOs to semicanonical MOs

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SINGLES_PRINT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SS_E_CONVERGENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   SS_R_CONVERGENCE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   SS_SKIP_DIAG (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do skip diagonalization of Hbar SS block?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SS_VECS_PER_ROOT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| SS vectors stored per root

      * **Type**: integer
      * **Default**: 5

   T3_WS_INCORE (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Do build W intermediates required for eom_cc3 in core memory?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   VECS_CC3 (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Vectors stored in CC3 computations

      * **Type**: integer
      * **Default**: 10

   VECS_PER_ROOT (CCEOM)
      :ref:`apdx:CCEOM` |w---w| Vectors stored per root

      * **Type**: integer
      * **Default**: 12

   CACHELEVEL (CCHBAR)
      :ref:`apdx:CCHBAR` |w---w| Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., :math:`\langle ij | ab \rangle` integrals) may be held in the cache.

      * **Type**: integer
      * **Default**: 2

   EOM_REFERENCE (CCHBAR)
      :ref:`apdx:CCHBAR` |w---w| Reference wavefunction type for EOM computations

      * **Type**: string
      * **Default**: RHF

   T_AMPS (CCHBAR)
      :ref:`apdx:CCHBAR` |w---w| Do compute the T amplitude equation matrix elements?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WABEI_LOWDISK (CCHBAR)
      :ref:`apdx:CCHBAR` |w---w| Do use the minimal-disk algorithm for Wabei? It's VERY slow!

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ABCD (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Type of ABCD algorithm will be used

      * **Type**: string
      * **Default**: NEW

   AO_BASIS (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| The algorithm to use for the :math:`\left\langle VV||VV \right\rangle` terms

      * **Type**: string
      * **Possible Values**: NONE, DISK, DIRECT
      * **Default**: NONE

   CACHELEVEL (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., :math:`\left\langle ij | ab \right\rangle` integrals) may be held in the cache.

      * **Type**: integer
      * **Default**: 2

   DIIS (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do use DIIS extrapolation to accelerate convergence?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   LOCAL (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do simulate the effects of local correlation techniques?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_CPHF_CUTOFF (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Cutoff value for local-coupled-perturbed-Hartree-Fock

      * **Type**: double
      * **Default**: 0.10

   LOCAL_CUTOFF (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

      * **Type**: double
      * **Default**: 0.02

   LOCAL_FILTER_SINGLES (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do apply local filtering to single de-excitation (\ :math:`\lambda 1` amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   LOCAL_METHOD (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Type of local-CCSD scheme to be simulated. ``WERNER`` (unique available option) selects the method developed by H.-J. Werner and co-workers.

      * **Type**: string
      * **Default**: WERNER

   LOCAL_PAIRDEF (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Definition of local pair domains

      * **Type**: string
      * **Default**: No Default

   LOCAL_WEAKP (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Desired treatment of "weak pairs" in the local-CCSD method. The value of ``NONE`` (unique available option) treats weak pairs in the same manner as strong pairs.

      * **Type**: string
      * **Default**: NONE

   MAXITER (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Maximum number of iterations

      * **Type**: integer
      * **Default**: 50

   NUM_AMPS_PRINT (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Number of important CC amplitudes per excitation level to print. CC analog to |detci__num_dets_print|.

      * **Type**: integer
      * **Default**: 10

   PROP_ALL (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Compute unrelaxed properties for all excited states.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PROP_ROOT (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Root number (within its irrep) for computing properties

      * **Type**: integer
      * **Default**: 1

   PROP_SYM (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| The symmetry of states

      * **Type**: integer
      * **Default**: 1

   RESTART (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do restart the coupled-cluster iterations from old :math:`\lambda_1` and :math:`\lambda_2` amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ROOTS_PER_IRREP (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| The number of electronic states to computed, per irreducible representation

      * **Type**: array
      * **Default**: No Default

   R_CONVERGENCE (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Convergence criterion for wavefunction (change) in CC lambda-amplitude equations.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   SEKINO (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do Sekino-Bartlett size-extensive model-III?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ZETA (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` |w---w| Do use zeta?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ABCD (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Type of ABCD algorithm will be used

      * **Type**: string
      * **Default**: NEW

   ANALYZE (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do analyze X2 amplitudes

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CACHELEVEL (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Caching level for libdpd

      * **Type**: integer
      * **Default**: 2

   DIIS (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do use DIIS extrapolation to accelerate convergence?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   GAUGE (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and ``LENGTH`` gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are ``LENGTH`` for the usual length-gauge representation, ``VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH``. Note that, for optical rotation and raman optical activity calculations, only the choices of ``VELOCITY`` or ``BOTH`` will yield origin-independent results.

      * **Type**: string
      * **Possible Values**: LENGTH, VELOCITY, BOTH
      * **Default**: VELOCITY

   LINEAR (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do Bartlett size-extensive linear model?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do simulate local correlation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_CPHF_CUTOFF (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Cutoff value for local-coupled-perturbed-Hartree-Fock

      * **Type**: double
      * **Default**: 0.10

   LOCAL_CUTOFF (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

      * **Type**: double
      * **Default**: 0.01

   LOCAL_FILTER_SINGLES (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do apply local filtering to single excitation amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_METHOD (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Type of local-CCSD scheme to be simulated. ``WERNER`` (unique available option) selects the method developed by H.-J. Werner and co-workers.

      * **Type**: string
      * **Default**: WERNER

   LOCAL_PAIRDEF (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Definition of local pair domains

      * **Type**: string
      * **Default**: NONE

   LOCAL_WEAKP (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Desired treatment of "weak pairs" in the local-CCSD method. The value of ``NONE`` (unique available option) treats weak pairs in the same manner as strong pairs.

      * **Type**: string
      * **Default**: NONE

   MAXITER (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Maximum number of iterations to converge perturbed amplitude equations

      * **Type**: integer
      * **Default**: 50

   NUM_AMPS_PRINT (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Number of important CC amplitudes per excitation level to print. CC analog to |detci__num_dets_print|.

      * **Type**: integer
      * **Default**: 5

   OMEGA (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are ``HZ``, ``NM``, ``EV``, and ``AU``.

      * **Type**: array
      * **Default**: No Default

   PROPERTY (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| The response property desired. Acceptable values are ``POLARIZABILITY`` (default) for dipole polarizabilities, ``ROTATION`` for specific rotations, ``ROA`` for Raman Optical Activity (``ROA_TENSOR`` for each displacement), and ``ALL`` for all of the above.

      * **Type**: string
      * **Possible Values**: POLARIZABILITY, ROTATION, ROA, ROA\_TENSOR, ALL
      * **Default**: POLARIZABILITY

   REFERENCE (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Reference wavefunction type

      * **Type**: string
      * **Default**: RHF

   RESTART (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do restart from on-disk amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   R_CONVERGENCE (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Convergence criterion for wavefunction (change) in perturbed CC equations.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   SEKINO (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` |w---w| Do Sekino-Bartlett size-extensive model-III?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   AO_BASIS (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| The algorithm to use for the :math:`\left\langle VV||VV \right\rangle` terms

      * **Type**: string
      * **Possible Values**: NONE, DISK, DIRECT
      * **Default**: NONE

   CACHELEVEL (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| Caching level for libdpd

      * **Type**: integer
      * **Default**: 2

   DELETE_TEI (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| Delete the SO two-electron integrals after the transformation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   REFERENCE (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| Reference wavefunction type

      * **Type**: string
      * **Default**: RHF

   RUN_CCTRANSORT (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SEMICANONICAL (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` |w---w| Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_NUM_THREADS (CCTRIPLES)
      :ref:`apdx:CCTRIPLES` |w---w| Number of threads

      * **Type**: integer
      * **Default**: 1

   REFERENCE (CCTRIPLES)
      :ref:`apdx:CCTRIPLES` |w---w| Reference wavefunction type

      * **Type**: string
      * **Default**: RHF

   SEMICANONICAL (CCTRIPLES)
      :ref:`apdx:CCTRIPLES` |w---w| Convert ROHF MOs to semicanonical MOs

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   TRANSLATE_PSI4 (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Do translate set Psi4 options to their cfour counterparts.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_ABCDTYPE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the way the :math:`\langle ab||cd \rangle` molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all :math:`\langle ab||cd\rangle` integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the :math:`\langle ab||cd\rangle` integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations.

      * **Type**: string
      * **Possible Values**: STANDARD, AOBASIS
      * **Default**: STANDARD

   CFOUR_ACTIVE_ORBI (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword |cfour__cfour_core_orbitals|. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see |cfour__cfour_occupation| .

      * **Type**: array
      * **Default**: No Default

   CFOUR_ANHARMONIC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form :math:`\phi_{nij}`, where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are *not* sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (*i.e.* HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form :math:`\phi_{ijkl}`, which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs.

      * **Type**: string
      * **Possible Values**: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF
      * **Default**: OFF

   CFOUR_ANH_ALGORITHM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which algorithm is used for |cfour__cfour_anharmonic| =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking ``xcfour`` will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in "parallel" (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode.

      * **Type**: string
      * **Possible Values**: STANDARD, PARALLEL
      * **Default**: STANDARD

   CFOUR_ANH_DERIVATIVES (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND).

      * **Type**: string
      * **Possible Values**: FIRST, SECOND
      * **Default**: SECOND

   CFOUR_ANH_STEPSIZE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is :math:`\times 10^6` the integer value specified.

      * **Type**: integer
      * **Default**: 50000

   CFOUR_ANH_SYMMETRY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether non-abelian symmetry is to be exploited in determining displacements for |cfour__cfour_anharmonic| =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you *must* use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules.

      * **Type**: string
      * **Possible Values**: ABELIAN, NONABELIAN
      * **Default**: ABELIAN

   CFOUR_AO_LADDERS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Can be used to control the algorithm used by CFOUR when terms involving :math:`\langle ab||cd\rangle` molecular orbital integrals are calculated in the atomic orbital basis (see |cfour__cfour_abcdtype|). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get "well-occupied" and "very sparse" blocks. "Well-occupied" blocks will be multiplied by matrix multiplication while in "very sparse" blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used.

      * **Type**: string
      * **Possible Values**: MULTIPASS, SINGLEPASS
      * **Default**: SINGLEPASS

   CFOUR_AV_SCF (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_BASIS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. **Psi4 Interface:** Recommended to use instead |mints__basis| for larger basis set selection and greater flexibility. When |mints__basis| used, |cfour__cfour_spherical| is set appropriately.

      * **Type**: string
      * **Default**: SPECIAL

   CFOUR_BRUCK_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| experimental use

      * **Type**: integer
      * **Default**: 4

   CFOUR_BRUECKNER (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_CACHE_RECS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100.

      * **Type**: integer
      * **Default**: 10

   CFOUR_CALC_LEVEL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Defines the level of calculation to be performed. **Psi4 Interface:** Keyword set from argument of computation command: CCSD if ``energy('c4-ccsd')``, *etc.* See :ref:`Energy (CFOUR) <table:energy_cfour>` and :ref:`Gradient (CFOUR) <table:grad_cfour>`. for all available.

      * **Type**: string
      * **Default**: SCF

   CFOUR_CC_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than :math:`10^N`, where :math:`N` is the value associated with the keyword.

      * **Type**: integer
      * **Default**: 7

   CFOUR_CC_EXPORDER (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations.

      * **Type**: integer
      * **Default**: 5

   CFOUR_CC_EXTRAPOLATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended.

      * **Type**: string
      * **Possible Values**: RLE, DIIS, NOJACOBI, OFF
      * **Default**: DIIS

   CFOUR_CC_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the maximum number of iterations in solving the CC amplitude equations.

      * **Type**: integer
      * **Default**: 50

   CFOUR_CC_PROGRAM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of ``xvcc``, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of ``xecc`` (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. **Psi4 Interface:** Keyword set according to best practice for the computational method |cfour__cfour_calc_level|, reference |cfour__cfour_reference| (NYI) and derivative level |cfour__cfour_deriv_level| according to Table :ref:`Best Practices <table:cfour_cc_program>` when method specified by argument to computation command (*e.g.*, when ``energy('c4-ccsd')`` requested but not when ``energy('cfour')`` requested). Value can always be set explicitly.

      * **Type**: string
      * **Possible Values**: VCC, ECC, NCC, MRCC, EXTERNAL
      * **Default**: VCC

   CFOUR_CHARGE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the molecular charge. **Psi4 Interface:** Keyword set from active molecule.

      * **Type**: integer
      * **Default**: 0

   CFOUR_CIS_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the convergence threshold as :math:`10^{-N}` for CIS calculations.

      * **Type**: integer
      * **Default**: 5

   CFOUR_CONTINUUM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Signifies that one or more "continuum" orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied.

      * **Type**: string
      * **Possible Values**: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED
      * **Default**: NONE

   CFOUR_CONTRACTION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode.

      * **Type**: string
      * **Possible Values**: SEGMENTED, GENERAL, UNCONTRACTED
      * **Default**: GENERAL

   CFOUR_CONVERGENCE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Identical to |cfour__cfour_geo_conv|.

      * **Type**: integer
      * **Default**: 4

   CFOUR_COORDINATES (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. **Psi4 Interface:** Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply.

      * **Type**: string
      * **Possible Values**: INTERNAL, CARTESIAN, XYZINT
      * **Default**: INTERNAL

   CFOUR_CORE_ORBITALS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword |cfour__cfour_active_orbi|. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see |cfour__cfour_occupation|.

      * **Type**: array
      * **Default**: No Default

   CFOUR_CPHF_CONVER (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below :math:`10^N`.

      * **Type**: integer
      * **Default**: 12

   CFOUR_CPHF_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations.

      * **Type**: integer
      * **Default**: 64

   CFOUR_CURVILINEAR (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_DBOC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_DCT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_DERIV_LEVEL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. **Psi4 Interface:** Keyword set from type of computation command: ZERO if :py:func:`~psi4.driver.energy`, FIRST if :py:func:`~psi4.driver.gradient` or :py:func:`~psi4.driver.optimize`, *etc.*

      * **Type**: string
      * **Possible Values**: ZERO, FIRST, SECOND
      * **Default**: ZERO

   CFOUR_DIFF_TYPE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation.

      * **Type**: string
      * **Possible Values**: RELAXED, UNRELAXED
      * **Default**: RELAXED

   CFOUR_DROPMO (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string ``1>10-55-58>64``, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. **Psi4 Interface:** The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64].

      * **Type**: array
      * **Default**: No Default

   CFOUR_ECP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_EIGENVECTOR (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues -- the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking for a specific transition state which you know corresponds to motion along a different mode. In the future, relatively sophisticated generation of a guessed eigenvector will be implemented, but this is the way things are for now. Of course, this keyword has no meaning if |cfour__cfour_method| is not set to TS.

      * **Type**: integer
      * **Default**: 1

   CFOUR_EL_ANHARM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Experimental use, ON = 1 requests the evaluation of electrical anharmonicities

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_EOM_NONIT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls whether non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with |cfour__cfour_excite| set to EOMIP, might work with EOMEE, certainly doesn't work with EOMEA. Use with great caution, preferably after having a few drinks.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_ESTATE_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below :math:`10^{-N}` with :math:`N` as the value specified with this keyword.

      * **Type**: integer
      * **Default**: 5

   CFOUR_ESTATE_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations)

      * **Type**: integer
      * **Default**: 20

   CFOUR_ESTATE_PROP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF.

      * **Type**: string
      * **Possible Values**: OFF, EXPECTATION, UNRELAXED, RESPONSE
      * **Default**: No Default

   CFOUR_ESTATE_SYM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (*i.e.* 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in |cfour__cfour_occupation|. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the ``%excite*`` input, if present, takes precedence over this keyword. Default: All zeros. **Psi4 Interface:** The array above is specified in PSI as (white space tolerant) [3,1,0,2].

      * **Type**: array
      * **Default**: No Default

   CFOUR_ESTATE_TRANS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR.

      * **Type**: string
      * **Possible Values**: OFF, EXPECTATION
      * **Default**: OFF

   CFOUR_EVAL_HESS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead, particularly |optking__full_hess_every|.

      * **Type**: integer
      * **Default**: 0

   CFOUR_EXCITATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n).

      * **Type**: integer
      * **Default**: 0

   CFOUR_EXCITE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states).

      * **Type**: string
      * **Possible Values**: NONE, EOMEE, EOMIP, EOMEA
      * **Default**: NONE

   CFOUR_FC_FIELD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword :math:`\times 10^{-6}`. The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0)

      * **Type**: integer
      * **Default**: 0

   CFOUR_FD_CALCTYPE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available.

      * **Type**: string
      * **Possible Values**: GRADONLY, ENERONLY, MIXED
      * **Default**: GRADONLY

   CFOUR_FD_IRREPS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the ``xjoda`` and then the ``xsymcor`` executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations

      * **Type**: array
      * **Default**: No Default

   CFOUR_FD_PROJECT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points.

      * **Type**: string
      * **Possible Values**: ON, OFF
      * **Default**: ON

   CFOUR_FD_STEPSIZE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the step length in mass-weighted coordinates (in :math:`10^{-4} amu^{1/2} bohr` ) used in generating the force constant matrix by finite difference of Cartesian gradients.

      * **Type**: integer
      * **Default**: 5

   CFOUR_FD_USEGROUP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation.

      * **Type**: string
      * **Possible Values**: FULL, COMP
      * **Default**: FULL

   CFOUR_FILE_RECSIZ (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands.

      * **Type**: integer
      * **Default**: 2048

   CFOUR_FILE_STRIPE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which ``MOINTS``, ``GAMLAM``, ``MOABCD``, ``DERINT``, and ``DERGAM`` are split, respectively.

      * **Type**: string
      * **Default**: 0/0/0/0/0

   CFOUR_FINITE_PERTURBATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the field strength for a perturbation (defined within a ``%perturbation`` section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword :math:`\times 10^{-6}`.

      * **Type**: integer
      * **Default**: 0

   CFOUR_FOCK (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while AO (=1) constructs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK).

      * **Type**: string
      * **Possible Values**: PK, AO
      * **Default**: No Default

   CFOUR_FREQ_ALGORITHM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| FREQ_ALGORIT experimental use

      * **Type**: string
      * **Possible Values**: STANDARD, PARALLEL
      * **Default**: STANDARD

   CFOUR_FROZEN_CORE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the |cfour__cfour_dropmo| keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_FROZEN_VIRT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a ``%frozen_virt`` section.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_GAMMA_ABCD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Used to control the handling and storage of two-particle density matrix elements with four virtual indices :math:`\Gamma(abcd)`. DISK (=0) directs the program to calculate and store all elements of :math:`\Gamma(abcd)`, while DIRECT (=1) tells the program to use alternative algorithms in which :math:`\Gamma(abcd)` is calculated and used "on the fly". Note that this option might be not available for all type of calculations.

      * **Type**: string
      * **Possible Values**: DISK, DIRECT
      * **Default**: DISK

   CFOUR_GENBAS_1 (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the ``GENBAS`` file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the ``GENBAS`` file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered ``GENBAS`` entry.

      * **Type**: string
      * **Default**: No Default

   CFOUR_GENBAS_2 (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword performs the same function as |cfour__cfour_genbas_1| above, but applies to second-row atoms.

      * **Type**: string
      * **Default**: No Default

   CFOUR_GENBAS_3 (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword performs the same function as |cfour__cfour_genbas_1| and |cfour__cfour_genbas_2| , but applies to third-row atoms.

      * **Type**: string
      * **Default**: No Default

   CFOUR_GENBAS_4 (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword performs the same function as |cfour__cfour_genbas_1| , |cfour__cfour_genbas_2| , and |cfour__cfour_genbas_3| , but applies to fourth-row atoms.

      * **Type**: string
      * **Default**: No Default

   CFOUR_GEO_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below :math:`10^{-N}` Hartree/bohr, where :math:`N` is the specified value. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead, particularly |optking__g_convergence| =CFOUR, which should be equivalent except for different internal coordinate definitions.

      * **Type**: integer
      * **Default**: 5

   CFOUR_GEO_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the maximum allowed number of geometry optimization cycles. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead, particularly |optking__geom_maxiter|.

      * **Type**: integer
      * **Default**: 50

   CFOUR_GEO_MAXSTEP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies largest step (in millibohr) which is allowed in geometry optimizations. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead, particularly |optking__intrafrag_step_limit|.

      * **Type**: integer
      * **Default**: 300

   CFOUR_GEO_METHOD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the used geometry optimization methods. The following values are permitted: NR (=0) --- straightforward Newton-Raphson search for minimum; RFA (=1) --- Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) --- Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized).

      * **Type**: string
      * **Possible Values**: NR, RFA, TS, MANR, SINGLE\_POINT, ENERONLY
      * **Default**: SINGLE\_POINT

   CFOUR_GIAO (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for |cfour__cfour_props| =NMR and =MAGNETIC, otherwise OFF

      * **Type**: string
      * **Possible Values**: ON, OFF
      * **Default**: No Default

   CFOUR_GRID (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with |cfour__cfour_coordinates| =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF)

      * **Type**: string
      * **Possible Values**: OFF, CARTESIAN, INTERNAL, QUADRATURE
      * **Default**: OFF

   CFOUR_GUESS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the ``JOBARC`` file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD)

      * **Type**: string
      * **Possible Values**: MOREAD, CORE
      * **Default**: MOREAD

   CFOUR_HBAR (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the "lambda" linear response equations are solved.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_HFSTABILITY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword |cfour__cfour_rot_evec|), after which the SCF is rerun.

      * **Type**: string
      * **Possible Values**: OFF, ON, FOLLOW
      * **Default**: OFF

   CFOUR_INCORE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the :math:`\langle ab\vert\vert cd\rangle` molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the :math:`\langle ab\vert\vert cd\rangle` and :math:`\langle ab\vert\vert ci\rangle` integrals are held in core; (=5) :math:`\langle ij\vert\vert kl\rangle` and :math:`\langle ij\vert\vert ka\rangle` and two-index quantities are held in core; (=6) all direct access files (``MOINTS``, ``GAMLAM``, etc.) are held in core. At present, these options have been implemented only in the energy code ``xvcc`` and the excitation energy code ``xvee``. (Default: 0)

      * **Type**: string
      * **Possible Values**: OFF, ALL, PARTIAL
      * **Default**: OFF

   CFOUR_INPUT_MRCC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if |cfour__cfour_cc_program| =EXTERNAL has been specified.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_INTEGRALS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword defines what type of integral input will be written by ``xjoda``. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer's ARGOS integral program will be written. (Default: VMOL).

      * **Type**: string
      * **Possible Values**: VMOL, ARGOS
      * **Default**: VMOL

   CFOUR_JODA_PRINT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls amount of debug printing performed by ``xjoda``. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk.

      * **Type**: integer
      * **Default**: 0

   CFOUR_LINEQ_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below :math:`10^{-N}`, where :math:`N` is the value associated with this keyword.

      * **Type**: integer
      * **Default**: 7

   CFOUR_LINEQ_MAXCY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| The maximum number of iterations in all linear CC equations.

      * **Type**: integer
      * **Default**: 50

   CFOUR_LINEQ_TYPE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Determines the algorithm used to solve linear equations ( :math:`\Lambda` and derivative :math:`T` and :math:`\Lambda` ). POPLE (=0) uses Pople's method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay's DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS)

      * **Type**: string
      * **Possible Values**: POPLE, DIIS
      * **Default**: DIIS

   CFOUR_LOCK_ORBOCC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword |cfour__cfour_occupation| (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with |cfour__cfour_occupation| and for second and later steps of optimizations; 0 if |cfour__cfour_occupation| omitted.)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_MAXSTEP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Identical to |cfour__cfour_geo_maxstep|.

      * **Type**: integer
      * **Default**: 300

   CFOUR_MEMORY_SIZE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword |cfour__cfour_mem_unit|. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). **Psi4 Interface:** Keyword set in MB from memory input command when given.

      * **Type**: integer
      * **Default**: 100000000

   CFOUR_MEM_UNIT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. **Psi4 Interface:** Keyword set from memory input command when given, always MB.

      * **Type**: string
      * **Possible Values**: INTEGERWORDS, KB, MB, GB, TB
      * **Default**: INTEGERWORDS

   CFOUR_METHOD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the geometry optimization strategy. Four values are permitted: NR (=0) -- Straightforward Newton-Raphson search for minimum; RFA (=1) -- Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) -- Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead, particularly |optking__opt_type| and |optking__step_type|.

      * **Type**: string
      * **Possible Values**: NR, RFA, TS, MANR, SINGLE\_POINT
      * **Default**: SINGLE\_POINT

   CFOUR_MRCC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee's ansatz.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_MULTIPLICITY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the spin multiplicity. **Psi4 Interface:** Keyword set from active molecule.

      * **Type**: integer
      * **Default**: 1

   CFOUR_NACOUPLING (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT.

      * **Type**: string
      * **Possible Values**: ON, NACV, LVC
      * **Default**: OFF

   CFOUR_NEGEVAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword |cfour__cfour_geo_method| is switched to RFA internally and the optimization is continued. **Psi4 Interface:** Geometry optimizations run through PSI (except in sandwich mode) use PSI's optimizer and so this keyword has no effect. Use :ref:`optking <apdx:optking>` keywords instead.

      * **Type**: string
      * **Possible Values**: ABORT, SWITCH, RFA
      * **Default**: ABORT

   CFOUR_NEWNORM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| All components of spherical AO's are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_NONHF (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_NTOP_TAMP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed.

      * **Type**: integer
      * **Default**: 15

   CFOUR_OCCUPATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the :math:`\alpha` and :math:`\beta` sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the :math:`^2A_1` water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the ``xvmol`` integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). **Psi4 Interface:** The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]].

      * **Type**: array
      * **Default**: No Default

   CFOUR_OPEN-SHELL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called "pseudo-triples" beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8).

      * **Type**: string
      * **Possible Values**: SPIN-ORBITAL, SR-CC, PSA-CC\_FULL, SR-CC\_FULL, TD-CC
      * **Default**: SPIN-ORBITAL

   CFOUR_OPT_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Identical to |cfour__cfour_geo_maxcyc|.

      * **Type**: integer
      * **Default**: 50

   CFOUR_ORBITALS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the :math:`\alpha` and the :math:`\beta` spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default.

      * **Type**: string
      * **Possible Values**: STANDARD, SEMICANONICAL
      * **Default**: STANDARD

   CFOUR_PERT_ORB (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives.

      * **Type**: string
      * **Possible Values**: STANDARD, CANONICAL, IJ\_CANONICAL
      * **Default**: No Default

   CFOUR_POINTS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work.

      * **Type**: string
      * **Possible Values**: SINGLE, DOUBLE
      * **Default**: DOUBLE

   CFOUR_PRINT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc.

      * **Type**: integer
      * **Default**: 0

   CFOUR_PROPS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants.

      * **Type**: string
      * **Possible Values**: OFF, FIRST\_ORDER, SECOND\_ORDER, NMR, HYPERPOL, DYN\_HYP, SHG, OPT\_REC, VERDET
      * **Default**: OFF

   CFOUR_PROP_INTEGRAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Allows storage of property integrals computed in ``xvdint`` on internal files (e.g., ``MOINTS`` and ``GAMLAM``, default choice INTERNAL, =0) or on external files (EXTERNAL, =1).

      * **Type**: string
      * **Possible Values**: INTERNAL, EXTERNAL
      * **Default**: INTERNAL

   CFOUR_QRHFGUES (CFOUR)
      :ref:`apdx:CFOUR` |w---w| If this keyword is set to ON (=1), then the QRHF orbitals specified by the |cfour__cfour_qrhf_general|, |cfour__cfour_qrhf_orbital| and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge "difficult" SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the |cfour__cfour_reference| keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_QRHF_GENERAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the |cfour__cfour_qrhfgues| option, is to be performed.

      * **Type**: array
      * **Default**: No Default

   CFOUR_QRHF_ORBITAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the |cfour__cfour_qrhf_general| input on a one-to-one basis. For example, specifying |cfour__cfour_qrhf_general| =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1)

      * **Type**: array
      * **Default**: No Default

   CFOUR_RAMAN_INT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor.

      * **Type**: string
      * **Possible Values**: ON, DYN, OFF
      * **Default**: OFF

   CFOUR_RAMAN_ORB (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0).

      * **Type**: string
      * **Possible Values**: RELAXED, UNRELAXED
      * **Default**: UNRELAXED

   CFOUR_RDO (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_REFERENCE (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). **Psi4 Interface:** Keyword subject to translation from value of |scf__reference| unless set explicitly.

      * **Type**: string
      * **Possible Values**: RHF, UHF, ROHF, TCSCF, CASSCF
      * **Default**: RHF

   CFOUR_RELATIVISTIC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2).

      * **Type**: string
      * **Possible Values**: OFF, MVD1, MVd2, DPT2, SF-DPT4, DPT4, SF-DPT6, SFREE, X2C1E, DPT
      * **Default**: OFF

   CFOUR_RELAX_DENS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_RESTART_CC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: ``JOBARC``, ``JAINDX``, ``MOINTS``, and ``MOABCD``.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_RES_RAMAN (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix ``FCMFINAL``, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_ROT_EVEC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF --> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value *n* directs the program to follow the vector associated with the *n*\ th lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF-->RHF or UHF-->UHF) properties. 0 means use the lowest eigenvalue.

      * **Type**: integer
      * **Default**: 0

   CFOUR_SAVE_INTS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Tells CFOUR whether to delete large files (AO integrals and ``MOINTS`` file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_SCALE_ON (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)).

      * **Type**: string
      * **Possible Values**: MAG(S), MAX(S)
      * **Default**: MAG(S)

   CFOUR_SCF_CONV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix elements is less than :math:`10^{-N}`. **Psi4 Interface:** Keyword subject to translation from value of |scf__d_convergence| unless set explicitly.

      * **Type**: integer
      * **Default**: 7

   CFOUR_SCF_DAMPING (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls the damping (in the first iterations (specified by |cfour__cfour_scf_expstart| via :math:`D_{new} = D_{old} + X/1000 * (D_{new} - D_{old})` with :math:`X` as the value specified by the keyword. The default value is currently 1000 (no damping), but a value of 500 is recommended in particular for transition metal compounds where the SCF convergence is often troublesome. **Psi4 Interface:** Keyword subject to translation from value of |scf__damping_percentage| unless set explicitly.

      * **Type**: integer
      * **Default**: 1000

   CFOUR_SCF_EXPORDER (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure.

      * **Type**: integer
      * **Default**: 6

   CFOUR_SCF_EXPSTART (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the first iteration in which the DIIS convergence acceleration procedure is applied.

      * **Type**: integer
      * **Default**: 8

   CFOUR_SCF_EXTRAPOLATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_SCF_MAXCYC (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the maximum number of SCF iterations. **Psi4 Interface:** Keyword subject to translation from value of |scf__maxiter| unless set explicitly.

      * **Type**: integer
      * **Default**: 150

   CFOUR_SD_FIELD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword :math:`\times 10^{-6}`. (Default : 0, currently not implemented)

      * **Type**: integer
      * **Default**: 0

   CFOUR_SPHERICAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. **Psi4 Interface:** Keyword set according to basis design when |mints__basis| is used instead of |cfour__cfour_basis|. Keyword subject to translation from value of |globals__puream| unless set explicitly.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_SPINROTATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculation (ON, =1) or not (OFF, =9). In the case of electronic g-tensor calculations for open-shell molecules this keyword controls the calculation of the electronic spin-rotation tensor.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_SPIN_FLIP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Controls whether excitation energy calculations allow for a "spin flip" which changes the :math:`M_s` quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_SPIN_ORBIT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)).

      * **Type**: string
      * **Possible Values**: ON, MEANSO, OFF
      * **Default**: OFF

   CFOUR_SPIN_SCAL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when |cfour__cfour_calc_level| =MP2 is specified and must be used together with |cfour__cfour_reference| =UHF.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_SUBGROUP (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies an Abelian subgroup to be used in a calculation. Acceptable arguments are DEFAULT (=0); C1 (= 1); C2 (= 2); CS (= 3); CI (= 4); C2V (= 5); C2H (= 6); D2 (= 7) and D2H (= 8). Use of C1 is of course equivalent to setting |cfour__cfour_symmetry| =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup.

      * **Type**: string
      * **Possible Values**: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF
      * **Default**: DEFAULT

   CFOUR_SYMMETRY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in :math:`C_1` ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( :math:`D_{2h}` and its subgroups).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_SYM_CHECK (CFOUR)
      :ref:`apdx:CFOUR` |w---w| In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 "forces" the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn't. The latter is the default.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_T3_EXTRAPOL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module ``xecc``.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CFOUR_TAMP_SUM (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies how often the largest :math:`t` amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc.

      * **Type**: integer
      * **Default**: 5

   CFOUR_THERMOCHEMISTRY (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version)

      * **Type**: string
      * **Possible Values**: OFF, ON, VERBOSE
      * **Default**: ON

   CFOUR_TRANS_INV (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off.

      * **Type**: string
      * **Possible Values**: USE, IGNORE
      * **Default**: USE

   CFOUR_TREAT_PERT (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space.

      * **Type**: string
      * **Possible Values**: SIMULTANEOUS, SEQUENTIAL
      * **Default**: SIMULTANEOUS

   CFOUR_UIJ_THRESHOLD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version)

      * **Type**: integer
      * **Default**: 25

   CFOUR_UNITS (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. **Psi4 Interface:** Keyword set from active molecule, always ANGSTROM.

      * **Type**: string
      * **Possible Values**: ANGSTROM, BOHR
      * **Default**: ANGSTROM

   CFOUR_UPDATE_HESSIAN (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a ``FCMINT`` file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CFOUR_VIBRATION (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated.

      * **Type**: string
      * **Possible Values**: NO, ANALYTIC, FINDIF, EXACT
      * **Default**: NO

   CFOUR_VTRAN (CFOUR)
      :ref:`apdx:CFOUR` |w---w| This keyword defines what type of integral transformation is to be performed in the program ``xvtran``. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the :math:`(ab \vert cd)` integrals are not formed.

      * **Type**: string
      * **Possible Values**: FULL/PARTIAL, FULL, PARTIAL
      * **Default**: FULL/PARTIAL

   CFOUR_XFIELD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword :math:`\times 10^{-6}`. This allows field strengths :math:`|\varepsilon| > 10^{-6}` to be used.

      * **Type**: integer
      * **Default**: 0

   CFOUR_XFORM_TOL (CFOUR)
      :ref:`apdx:CFOUR` |w---w| The tolerance for storing transformed integrals. Integrals less than :math:`10^{-N}` are neglected and not stored on disk.

      * **Type**: integer
      * **Default**: 11

   CFOUR_YFIELD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword :math:`\times 10^{-6}`. This allows field strengths :math:`|\varepsilon| > 10^{-6}` to be used.

      * **Type**: integer
      * **Default**: 0

   CFOUR_ZFIELD (CFOUR)
      :ref:`apdx:CFOUR` |w---w| Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword :math:`\times 10^{-6}`. This allows field strengths :math:`|\varepsilon| > 10^{-6}` to be used.

      * **Type**: integer
      * **Default**: 0

   CPHF_MEM_SAFETY_FACTOR (CPHF)
      :ref:`apdx:CPHF` |w---w| Memory safety factor for allocating JK

      * **Type**: double
      * **Default**: 0.75

   CPHF_TASKS (CPHF)
      :ref:`apdx:CPHF` |w---w| Which tasks to run CPHF For * Valid choices: * -Polarizability *

      * **Type**: array
      * **Default**: No Default

   DEBUG (CPHF)
      :ref:`apdx:CPHF` |w---w| The amount of debug information printed to the output file

      * **Type**: integer
      * **Default**: 0

   DF_BASIS_SCF (CPHF)
      :ref:`apdx:CPHF` |w---w| Auxiliary basis for SCF

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   EXPLICIT_HAMILTONIAN (CPHF)
      :ref:`apdx:CPHF` |w---w| Do explicit hamiltonian only?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MODULE (CPHF)
      :ref:`apdx:CPHF` |w---w| What app to test?

      * **Type**: string
      * **Possible Values**: RCPHF
      * **Default**: RCPHF

   PRINT (CPHF)
      :ref:`apdx:CPHF` |w---w| The amount of information printed to the output file

      * **Type**: integer
      * **Default**: 1

   SCF_TYPE (CPHF)
      :ref:`apdx:CPHF` |w---w| SCF Type

      * **Type**: string
      * **Possible Values**: DIRECT, DF, PK, OUT\_OF\_CORE, PS, INDEPENDENT, GTFOCK, DFDIRJ+LINK, DFDIRJ+COSX
      * **Default**: DIRECT

   SOLVER_CONVERGENCE (CPHF)
      :ref:`apdx:CPHF` |w---w| Solver convergence threshold (max 2-norm).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   SOLVER_MAXITER (CPHF)
      :ref:`apdx:CPHF` |w---w| Solver maximum iterations

      * **Type**: integer
      * **Default**: 100

   SOLVER_N_GUESS (CPHF)
      :ref:`apdx:CPHF` |w---w| DL Solver number of guesses

      * **Type**: integer
      * **Default**: 1

   SOLVER_PRECONDITION (CPHF)
      :ref:`apdx:CPHF` |w---w| Solver precondition type

      * **Type**: string
      * **Possible Values**: SUBSPACE, JACOBI, NONE
      * **Default**: JACOBI

   ALGORITHM (DCT)
      :ref:`apdx:DCT` |w---w| Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used.

      * **Type**: string
      * **Possible Values**: TWOSTEP, SIMULTANEOUS, QC
      * **Default**: SIMULTANEOUS

   AO_BASIS (DCT)
      :ref:`apdx:DCT` |w---w| Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\ :math:`\langle VV|| VV \rangle`\ ) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O.

      * **Type**: string
      * **Possible Values**: NONE, DISK
      * **Default**: DISK

   DCT_FUNCTIONAL (DCT)
      :ref:`apdx:DCT` |w---w| Chooses appropriate DCT method

      * **Type**: string
      * **Possible Values**: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0
      * **Default**: ODC-12

   DCT_TYPE (DCT)
      :ref:`apdx:DCT` |w---w| What algorithm to use for the DCT computation

      * **Type**: string
      * **Possible Values**: CONV, DF
      * **Default**: CONV

   DF_BASIS_DCT (DCT)
      :ref:`apdx:DCT` |w---w| Auxiliary basis set for DCT density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a RI basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DIIS_START_CONVERGENCE (DCT)
      :ref:`apdx:DCT` |w---w| Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-3

   E_CONVERGENCE (DCT)
      :ref:`apdx:DCT` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-10

   GUESS_R_CONVERGENCE (DCT)
      :ref:`apdx:DCT` |w---w| Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-3

   MAXITER (DCT)
      :ref:`apdx:DCT` |w---w| Maximum number of macro- or micro-iterations for both energy and response equations

      * **Type**: integer
      * **Default**: 40

   ODC_GUESS (DCT)
      :ref:`apdx:DCT` |w---w| Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OPDM (DCT)
      :ref:`apdx:DCT` |w---w| Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   QC_COUPLING (DCT)
      :ref:`apdx:DCT` |w---w| Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   QC_TYPE (DCT)
      :ref:`apdx:DCT` |w---w| Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step.

      * **Type**: string
      * **Possible Values**: TWOSTEP, SIMULTANEOUS
      * **Default**: SIMULTANEOUS

   REFERENCE (DCT)
      :ref:`apdx:DCT` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: UHF, RHF, ROHF
      * **Default**: RHF

   RESPONSE_ALGORITHM (DCT)
      :ref:`apdx:DCT` |w---w| Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties

      * **Type**: string
      * **Possible Values**: TWOSTEP, SIMULTANEOUS
      * **Default**: TWOSTEP

   R_CONVERGENCE (DCT)
      :ref:`apdx:DCT` |w---w| Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-10

   THREE_PARTICLE (DCT)
      :ref:`apdx:DCT` |w---w| Whether to compute three-particle energy correction or not

      * **Type**: string
      * **Possible Values**: NONE, PERTURBATIVE
      * **Default**: NONE

   DDX_DIIS_MAX_VECS (DDX)
      :ref:`apdx:DDX` |w---w| Number of previous iterates to use in DIIS acceleration inside DDX

      * **Type**: integer
      * **Default**: 20

   DDX_FMM (DDX)
      :ref:`apdx:DDX` |w---w| Use the fast multipole method to accelerate the solver

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DDX_FMM_LOCAL_LMAX (DDX)
      :ref:`apdx:DDX` |w---w| Maximal degree of local spherical harmonics (near-field FMM interations).

      * **Type**: integer
      * **Default**: 6

   DDX_FMM_MULTIPOLE_LMAX (DDX)
      :ref:`apdx:DDX` |w---w| Maximal degree of multipole spherical harmonics (far-field FMM interactions). Using the same value as |ddx__ddx_lmax| is recommended and done by default.

      * **Type**: integer
      * **Default**: 9

   DDX_INCORE (DDX)
      :ref:`apdx:DDX` |w---w| Use an in-core version, which uses more memory, but is generally faster

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DDX_LMAX (DDX)
      :ref:`apdx:DDX` |w---w| Maximal degree of modelling spherical harmonics

      * **Type**: integer
      * **Default**: 9

   DDX_MAXITER (DDX)
      :ref:`apdx:DDX` |w---w| Maximal number of iterations used inside DDX

      * **Type**: integer
      * **Default**: 100

   DDX_MODEL (DDX)
      :ref:`apdx:DDX` |w---w| Switch available solvation models

      * **Type**: string
      * **Possible Values**: PCM, COSMO, LPB
      * **Default**: PCM

   DDX_N_LEBEDEV (DDX)
      :ref:`apdx:DDX` |w---w| Number of Lebedev grid points to use. (A :ref:`Lebedev Points <table:lebedevorder>` number)

      * **Type**: integer
      * **Default**: 302

   DDX_RADII (DDX)
      :ref:`apdx:DDX` |w---w| Custom cavity radii. One per atom, uses the unit of the molecule.

      * **Type**: array
      * **Default**: No Default

   DDX_RADII_SCALING (DDX)
      :ref:`apdx:DDX` |w---w| Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen.

      * **Type**: double
      * **Default**: 1.1

   DDX_RADII_SET (DDX)
      :ref:`apdx:DDX` |w---w| Radius set for cavity spheres. Ignored if RADII is set.

      * **Type**: string
      * **Possible Values**: UFF, BONDI
      * **Default**: UFF

   DDX_SOLUTE_RADIAL_POINTS (DDX)
      :ref:`apdx:DDX` |w---w| Number of radial points used to compute the integrals for DDX calculations

      * **Type**: integer
      * **Default**: 35

   DDX_SOLUTE_SPHERICAL_POINTS (DDX)
      :ref:`apdx:DDX` |w---w| Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A :ref:`Lebedev Points <table:lebedevorder>` number)

      * **Type**: integer
      * **Default**: 110

   DDX_SOLVATION_CONVERGENCE (DDX)
      :ref:`apdx:DDX` |w---w| Tolerance to which DDX linear systems are solved

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   DDX_SOLVENT (DDX)
      :ref:`apdx:DDX` |w---w| Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set.

      * **Type**: string
      * **Default**: No Default

   DDX_SOLVENT_EPSILON (DDX)
      :ref:`apdx:DDX` |w---w| Dielectric constant of the solvent to use

      * **Type**: double
      * **Default**: 0

   DDX_SOLVENT_EPSILON_OPTICAL (DDX)
      :ref:`apdx:DDX` |w---w| Optical dielectric constant of the solvent to use for non-equilibrium solvation

      * **Type**: double
      * **Default**: 0

   DDX_SOLVENT_KAPPA (DDX)
      :ref:`apdx:DDX` |w---w| Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}).

      * **Type**: double
      * **Default**: 0

   AVG_STATES (DETCI)
      :ref:`apdx:DETCI` |w---w| Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0.

      * **Type**: array
      * **Default**: No Default

   AVG_WEIGHTS (DETCI)
      :ref:`apdx:DETCI` |w---w| Array giving the weights for each state in a state-averaged procedure

      * **Type**: array
      * **Default**: No Default

   A_RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of alpha electrons in RAS III

      * **Type**: integer
      * **Default**: -1

   B_RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of beta electrons in RAS III

      * **Type**: integer
      * **Default**: -1

   CALC_S_SQUARED (DETCI)
      :ref:`apdx:DETCI` |w---w| Do calculate the value of :math:`\langle S^2\rangle` for each root? Only supported for |detci__icore| = 1.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CIBLKS_PRINT (DETCI)
      :ref:`apdx:DETCI` |w---w| Do print a summary of the CI blocks?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CI_MAXITER (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum number of iterations to diagonalize the Hamiltonian

      * **Type**: integer
      * **Default**: 24

   DETCI_FREEZE_CORE (DETCI)
      :ref:`apdx:DETCI` |w---w| Do freeze core orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EX_LEVEL (DETCI)
      :ref:`apdx:DETCI` |w---w| The CI excitation level

      * **Type**: integer
      * **Default**: 2

   E_CONVERGENCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   FCI (DETCI)
      :ref:`apdx:DETCI` |w---w| Do a full CI (FCI)? If TRUE, overrides the value of |detci__ex_level|.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ICORE (DETCI)
      :ref:`apdx:DETCI` |w---w| Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if |detci__diag_method| = SEM), but require less core memory.

      * **Type**: integer
      * **Default**: 1

   ISTOP (DETCI)
      :ref:`apdx:DETCI` |w---w| Do stop DETCI after string information is formed and before integrals are read?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MS0 (DETCI)
      :ref:`apdx:DETCI` |w---w| Do use the :math:`M_s = 0` component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the |detci__s| option.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   NUM_DETS_PRINT (DETCI)
      :ref:`apdx:DETCI` |w---w| Number of important determinants to print

      * **Type**: integer
      * **Default**: 20

   NUM_ROOTS (DETCI)
      :ref:`apdx:DETCI` |w---w| number of CI roots to find

      * **Type**: integer
      * **Default**: 1

   RAS34_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS III + IV

      * **Type**: integer
      * **Default**: -1

   RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS III

      * **Type**: integer
      * **Default**: -1

   RAS4_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS IV

      * **Type**: integer
      * **Default**: -1

   REFERENCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: RHF, ROHF
      * **Default**: RHF

   R_CONVERGENCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   S (DETCI)
      :ref:`apdx:DETCI` |w---w| The value of the spin quantum number :math:`S` is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the :math:`M_s = 0` component is used (i.e., |detci__ms0| = ``TRUE``), and (2) making sure the guess vector has the desired value of :math:`\langle S^2\rangle` (if |detci__calc_s_squared| is ``TRUE`` and |detci__icore| = ``1``).

      * **Type**: double
      * **Default**: 0.0

   VAL_EX_LEVEL (DETCI)
      :ref:`apdx:DETCI` |w---w| In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore |detci__ex_level| + VAL_EX_LEVEL.

      * **Type**: integer
      * **Default**: 0

   DIAG_METHOD (DETCI)
      :ref:`apdx:DETCI` |w---w| This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: ``RSP``, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); ``OLSEN``, to use Olsen's preconditioned inverse subspace method (1990); ``MITRUSHENKOV``, to use a 2x2 Olsen/Davidson method; and ``DAVIDSON`` (or ``SEM``) to use Liu's Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The ``SEM`` method is the most robust, but it also requires :math:`2NM+1` CI vectors on disk, where :math:`N` is the maximum number of iterations and :math:`M` is the number of roots.

      * **Type**: string
      * **Possible Values**: RSP, DAVIDSON, SEM
      * **Default**: SEM

   LSE (DETCI)
      :ref:`apdx:DETCI` |w---w| Do use least-squares extrapolation in iterative solution of CI vector?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LSE_COLLAPSE (DETCI)
      :ref:`apdx:DETCI` |w---w| Number of iterations between least-squares extrapolations

      * **Type**: integer
      * **Default**: 3

   LSE_TOLERANCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Minimum converged energy for least-squares extrapolation to be performed

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 3

   PRECONDITIONER (DETCI)
      :ref:`apdx:DETCI` |w---w| This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: ``DAVIDSON`` which approximates the Hamiltonian matrix by the diagonal elements; ``H0BLOCK_INV`` which uses an exact Hamiltonian of |detci__h0_blocksize| and explicitly inverts it; ``GEN_DAVIDSON`` which does a spectral decomposition of H0BLOCK; ``ITER_INV`` using an iterative approach to obtain the correction vector of H0BLOCK. The ``H0BLOCK_INV``, ``GEN_DAVIDSON``, and ``ITER_INV`` approaches are all formally equivalent but the ``ITER_INV`` is less computationally expensive. Default is ``DAVIDSON``.

      * **Type**: string
      * **Possible Values**: LANCZOS, DAVIDSON, GEN\_DAVIDSON, H0BLOCK, ITER\_INV, EVANGELISTI
      * **Default**: DAVIDSON

   UPDATE (DETCI)
      :ref:`apdx:DETCI` |w---w| The update or correction vector formula, either ``DAVIDSON`` (default) or ``OLSEN``.

      * **Type**: string
      * **Possible Values**: DAVIDSON, OLSEN
      * **Default**: DAVIDSON

   DIPMOM (DETCI)
      :ref:`apdx:DETCI` |w---w| Do compute the dipole moment?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   NAT_ORBS (DETCI)
      :ref:`apdx:DETCI` |w---w| Do compute natural orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OPDM (DETCI)
      :ref:`apdx:DETCI` |w---w| Do compute one-particle density matrix if not otherwise required?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   TDM (DETCI)
      :ref:`apdx:DETCI` |w---w| Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FOLLOW_ROOT (DETCI)
      :ref:`apdx:DETCI` |w---w| The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state.

      * **Type**: integer
      * **Default**: 0

   RESTART (DETCI)
      :ref:`apdx:DETCI` |w---w| Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   COLLAPSE_SIZE (DETCI)
      :ref:`apdx:DETCI` |w---w| Gives the number of vectors to retain when the Davidson subspace is collapsed (see |detci__max_num_vecs|). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1.

      * **Type**: integer
      * **Default**: 1

   MAX_NUM_VECS (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to |detci__collapse_size| vectors for each root. This is very helpful for saving disk space. Defaults to |detci__ci_maxiter| * |detci__num_roots| + |detci__num_init_vecs|.

      * **Type**: integer
      * **Default**: 0

   MPN (DETCI)
      :ref:`apdx:DETCI` |w---w| Do compute the MPn series out to kth order where k is determined by |detci__max_num_vecs| ? For open-shell systems (|detci__reference| is ROHF, |detci__wfn| is ZAPTN), DETCI will compute the ZAPTn series. |detci__guess_vector| must be set to UNIT, |detci__hd_otf| must be set to TRUE, and |detci__hd_avg| must be set to orb_ener; these should happen by default for MPN = TRUE.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC (DETCI)
      :ref:`apdx:DETCI` |w---w| Do coupled-cluster computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_A_RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of alpha electrons in RAS III, for CC

      * **Type**: integer
      * **Default**: -1

   CC_B_RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of beta electrons in RAS III, for CC

      * **Type**: integer
      * **Default**: -1

   CC_EX_LEVEL (DETCI)
      :ref:`apdx:DETCI` |w---w| The CC excitation level

      * **Type**: integer
      * **Default**: 2

   CC_RAS34_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS III + IV, for CC

      * **Type**: integer
      * **Default**: -1

   CC_RAS3_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS III, for CC

      * **Type**: integer
      * **Default**: -1

   CC_RAS4_MAX (DETCI)
      :ref:`apdx:DETCI` |w---w| maximum number of electrons in RAS IV, for CC

      * **Type**: integer
      * **Default**: -1

   CC_VAL_EX_LEVEL (DETCI)
      :ref:`apdx:DETCI` |w---w| The CC valence excitation level

      * **Type**: integer
      * **Default**: 0

   CC_VECS_READ (DETCI)
      :ref:`apdx:DETCI` |w---w| Do import a CC vector from disk?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_VECS_WRITE (DETCI)
      :ref:`apdx:DETCI` |w---w| Do export a CC vector to disk?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DIIS (DETCI)
      :ref:`apdx:DETCI` |w---w| Do use DIIS extrapolation to accelerate CC convergence?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DIIS_FREQ (DETCI)
      :ref:`apdx:DETCI` |w---w| How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc.

      * **Type**: integer
      * **Default**: 1

   DIIS_MAX_VECS (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 5

   DIIS_MIN_VECS (DETCI)
      :ref:`apdx:DETCI` |w---w| Minimum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 2

   DIIS_START_ITER (DETCI)
      :ref:`apdx:DETCI` |w---w| Iteration at which to start using DIIS

      * **Type**: integer
      * **Default**: 1

   NUM_AMPS_PRINT (DETCI)
      :ref:`apdx:DETCI` |w---w| Number of important CC amplitudes per excitation level to print. CC analog to |detci__num_dets_print|.

      * **Type**: integer
      * **Default**: 10

   DF_BASIS_MCSCF (DETCI)
      :ref:`apdx:DETCI` |w---w| Auxiliary basis set for MCSCF density fitted ERI computations. This only effects the "Q" matrix in Helgaker's language. :ref:`Defaults <apdx:basisFamily>` to a JKFIT basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   MCSCF_ALGORITHM (DETCI)
      :ref:`apdx:DETCI` |w---w| Convergence algorithm to utilize. Two-Step, Augmented Hessian. Defaults to TS for RASSCF.

      * **Type**: string
      * **Possible Values**: TS, AH
      * **Default**: TS

   MCSCF_CI_CLEANUP (DETCI)
      :ref:`apdx:DETCI` |w---w| Cleanup the CI info at the end of a run?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   MCSCF_DIIS_ERROR_TYPE (DETCI)
      :ref:`apdx:DETCI` |w---w| DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix

      * **Type**: string
      * **Possible Values**: GRAD, UPDATE
      * **Default**: GRAD

   MCSCF_DIIS_FREQ (DETCI)
      :ref:`apdx:DETCI` |w---w| How often to do a DIIS extrapolation for TS convergence

      * **Type**: integer
      * **Default**: 1

   MCSCF_DIIS_MAX_VECS (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum number of DIIS vectors for TS convergence

      * **Type**: integer
      * **Default**: 8

   MCSCF_DIIS_START (DETCI)
      :ref:`apdx:DETCI` |w---w| Iteration to turn on DIIS for TS convergence

      * **Type**: integer
      * **Default**: 3

   MCSCF_DPD_CLEANUP (DETCI)
      :ref:`apdx:DETCI` |w---w| Cleanup the DPD MCSCF object at the end of a run?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   MCSCF_E_CONVERGENCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   MCSCF_GUESS (DETCI)
      :ref:`apdx:DETCI` |w---w| Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference

      * **Type**: string
      * **Possible Values**: MP2, SCF
      * **Default**: SCF

   MCSCF_MAXITER (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum number MCSCF of iterations

      * **Type**: integer
      * **Default**: 30

   MCSCF_MAX_ROT (DETCI)
      :ref:`apdx:DETCI` |w---w| Maximum value in the rotation matrix. If a value is greater than this number all values are scaled.

      * **Type**: double
      * **Default**: 0.5

   MCSCF_ROTATE (DETCI)
      :ref:`apdx:DETCI` |w---w| Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals.

      * **Type**: array
      * **Default**: No Default

   MCSCF_R_CONVERGENCE (DETCI)
      :ref:`apdx:DETCI` |w---w| Convergence criterion for the RMS of the orbital gradient

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   MCSCF_SO_START_E (DETCI)
      :ref:`apdx:DETCI` |w---w| Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence

      * **Type**: double
      * **Default**: 1e-4

   MCSCF_SO_START_GRAD (DETCI)
      :ref:`apdx:DETCI` |w---w| Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient

      * **Type**: double
      * **Default**: 1e-4

   MCSCF_TYPE (DETCI)
      :ref:`apdx:DETCI` |w---w| Method to handle the two-electron integrals

      * **Type**: string
      * **Possible Values**: DF, CONV, AO
      * **Default**: CONV

   DF_BASIS_EP2 (DFEP2)
      :ref:`apdx:DFEP2` |w---w| Auxiliary basis set for EP2 density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a RI basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   EP2_CONVERGENCE (DFEP2)
      :ref:`apdx:DFEP2` |w---w| What is the maximum number of iterations?

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 5.e-5

   EP2_MAXITER (DFEP2)
      :ref:`apdx:DFEP2` |w---w| What is the maximum number of iterations?

      * **Type**: integer
      * **Default**: 20

   EP2_NUM_EA (DFEP2)
      :ref:`apdx:DFEP2` |w---w| Number of Electron Affinities to compute, starting with the LUMO.

      * **Type**: integer
      * **Default**: 0

   EP2_NUM_IP (DFEP2)
      :ref:`apdx:DFEP2` |w---w| Number of Ionization Potentials to compute, starting with the HOMO.

      * **Type**: integer
      * **Default**: 3

   EP2_ORBITALS (DFEP2)
      :ref:`apdx:DFEP2` |w---w| Explicitly pick orbitals to use in the EP2 method, overrides |dfep2__EP2_NUM_IP| and |dfep2__ep2_num_ea| options. Input array should be [[orb1, orb2], [], ...] for each irrep.

      * **Type**: array
      * **Default**: No Default

   BASIS (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Primary basis set

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: NONE

   DFMP2_MEM_FACTOR (DFMP2)
      :ref:`apdx:DFMP2` |w---w| \% of memory for DF-MP2 three-index buffers

      * **Type**: double
      * **Default**: 0.9

   DFMP2_P2_TOLERANCE (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.0

   DFMP2_P_TOLERANCE (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.0

   DF_BASIS_MP2 (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Auxiliary basis set for MP2 density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a RI basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DF_INTS_NUM_THREADS (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Number of threads to compute integrals with. 0 is wild card

      * **Type**: integer
      * **Default**: 0

   INTS_TOLERANCE (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.0

   MP2_OS_SCALE (DFMP2)
      :ref:`apdx:DFMP2` |w---w| OS Scale

      * **Type**: double
      * **Default**: 6.0

   MP2_SS_SCALE (DFMP2)
      :ref:`apdx:DFMP2` |w---w| SS Scale

      * **Type**: double
      * **Default**: 1.0

   ONEPDM (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Do compute one-particle density matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OPDM_RELAX (DFMP2)
      :ref:`apdx:DFMP2` |w---w| Do relax the one-particle density matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CC_DIIS_MAX_VECS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Maximum number of vectors used in amplitude DIIS

      * **Type**: integer
      * **Default**: 6

   CC_DIIS_MIN_VECS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Minimum number of vectors used in amplitude DIIS

      * **Type**: integer
      * **Default**: 2

   CC_LAMBDA (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do solve lambda amplitude equations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_MAXITER (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Maximum number of iterations to determine the amplitudes

      * **Type**: integer
      * **Default**: 50

   CHOLESKY (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do Cholesky decomposition of the ERI tensor

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CHOLESKY_TOLERANCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| tolerance for Cholesky decomposition of the ERI tensor

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-4

   COMPUT_S2 (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do compute :math:`\langle \hat{S}^2 \rangle` for DF-OMP2/DF-MP2?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CUTOFF (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Cutoff value for numerical procedures

      * **Type**: integer
      * **Default**: 8

   DO_DIIS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do apply DIIS extrapolation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_LEVEL_SHIFT (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do apply level shifting?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_SCS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set 'DO_SCS' to true

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_SOS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set 'DO_SOS' to true

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   E3_SCALE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| CEPA opposite-spin scaling value from SCS-CCSD

      * **Type**: double
      * **Default**: 0.25

   EKT_IP (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do compute ionization potentials based on the extended Koopmans' theorem?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   E_CONVERGENCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   HESS_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Type of the MO Hessian matrix

      * **Type**: string
      * **Possible Values**: APPROX\_DIAG, APPROX\_DIAG\_EKT, APPROX\_DIAG\_HF, HF
      * **Default**: HF

   INTEGRAL_CUTOFF (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Cutoff value for DF integrals

      * **Type**: integer
      * **Default**: 9

   LEVEL_SHIFT (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Level shift to aid convergence

      * **Type**: double
      * **Default**: 0.02

   LINEQ_SOLVER (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The solver will be used for simultaneous linear equations.

      * **Type**: string
      * **Possible Values**: CDGESV, FLIN, POPLE
      * **Default**: CDGESV

   MAX_MOGRAD_CONVERGENCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired |dfocc__e_convergence|. The listed default will be used for the default value of |dfocc__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   MOLDEN_WRITE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by |globals__writer_file_label| (if set), or else by the name of the output file plus the name of the current molecule.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MO_DIIS_NUM_VECS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Number of vectors used in orbital DIIS

      * **Type**: integer
      * **Default**: 6

   MO_MAXITER (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Maximum number of iterations to determine the orbitals

      * **Type**: integer
      * **Default**: 100

   MO_STEP_MAX (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Maximum step size in orbital-optimization procedure

      * **Type**: double
      * **Default**: 0.5

   MP2_AMP_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary.

      * **Type**: string
      * **Possible Values**: DIRECT, CONV
      * **Default**: DIRECT

   MP2_OS_SCALE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| MP2 opposite-spin scaling value

      * **Type**: double
      * **Default**: 6.0

   MP2_SOS_SCALE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| MP2 Spin-opposite scaling (SOS) value

      * **Type**: double
      * **Default**: 1.3

   MP2_SOS_SCALE2 (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Spin-opposite scaling (SOS) value for optimized-MP2 orbitals

      * **Type**: double
      * **Default**: 1.2

   MP2_SS_SCALE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| MP2 same-spin scaling value

      * **Type**: double
      * **Default**: 1.0

   NAT_ORBS (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do compute natural orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OCC_ORBS_PRINT (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do print OCC orbital energies?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OEPROP (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do compute one electron properties?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OO_SCALE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| OO scaling factor used in MSD

      * **Type**: double
      * **Default**: 0.01

   OPT_METHOD (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options.

      * **Type**: string
      * **Possible Values**: QNR
      * **Default**: QNR

   ORB_OPT (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do optimize the orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   ORB_RESP_SOLVER (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method.

      * **Type**: string
      * **Possible Values**: PCG, LINEQ
      * **Default**: PCG

   ORTH_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The algorithm for orthogonalization of MOs

      * **Type**: string
      * **Possible Values**: GS, MGS
      * **Default**: MGS

   PCG_BETA_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.

      * **Type**: string
      * **Possible Values**: FLETCHER\_REEVES, POLAK\_RIBIERE
      * **Default**: FLETCHER\_REEVES

   PCG_CONVERGENCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Convergence criterion for residual vector of preconditioned conjugate gradient method. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve |dfocc__r_convergence| residual convergence. The listed default will be used for the default value of |dfocc__r_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   PCG_MAXITER (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Maximum number of preconditioned conjugate gradient iterations.

      * **Type**: integer
      * **Default**: 50

   PPL_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Type of the CCSD PPL term.

      * **Type**: string
      * **Possible Values**: LOW\_MEM, HIGH\_MEM, CD, AUTO
      * **Default**: AUTO

   QCHF (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do perform a QCHF computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   READ_SCF_3INDEX (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do read 3-index integrals from SCF files?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   REGULARIZATION (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Do use regularized denominators?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   REG_PARAM (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Regularization parameter

      * **Type**: double
      * **Default**: 0.4

   REMP_A (DFOCC)
      :ref:`apdx:DFOCC` |w---w| mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction

      * **Type**: double
      * **Default**: 0.15e0

   RMS_MOGRAD_CONVERGENCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired |dfocc__e_convergence|. The listed default will be used for the default value of |dfocc__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   R_CONVERGENCE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Convergence criterion for amplitudes (residuals).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   SCS_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Type of the SCS method

      * **Type**: string
      * **Possible Values**: SCS, SCSN, SCSVDW, SCSMI
      * **Default**: SCS

   SOS_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Type of the SOS method

      * **Type**: string
      * **Possible Values**: SOS, SOSPI
      * **Default**: SOS

   TRIPLES_IABC_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| The algorithm to handle (ia|bc) type integrals that used for (T) correction.

      * **Type**: string
      * **Possible Values**: INCORE, AUTO, DIRECT, DISK
      * **Default**: DISK

   WFN_TYPE (DFOCC)
      :ref:`apdx:DFOCC` |w---w| Type of the wavefunction.

      * **Type**: string
      * **Default**: DF-OMP2

   DF_BASIS_MP2 (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Auxiliary basis set for MP2 density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a RI basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DLPNO_LOCAL_ORBITALS (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Orbital localizer

      * **Type**: string
      * **Possible Values**: BOYS, PIPEK\_MEZEY
      * **Default**: BOYS

   DLPNO_MAXITER (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Maximum number of iterations to determine the MP2 amplitudes.

      * **Type**: integer
      * **Default**: 50

   E_CONVERGENCE (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Energy convergence criteria for local MP2 iterations

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   LOCAL_CONVERGENCE (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Convergence criteria for the Foster-Boys orbital localization

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   LOCAL_MAXITER (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Maximum iterations in Foster-Boys localization

      * **Type**: integer
      * **Default**: 1000

   PNO_CONVERGENCE (DLPNO)
      :ref:`apdx:DLPNO` |w---w| General convergence criteria for DLPNO methods

      * **Type**: string
      * **Possible Values**: LOOSE, NORMAL, TIGHT
      * **Default**: NORMAL

   R_CONVERGENCE (DLPNO)
      :ref:`apdx:DLPNO` |w---w| Residual convergence criteria for local MP2 iterations

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   DMRG_CASPT2_CALC (DMRG)
      :ref:`apdx:DMRG` |w---w| Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_CASPT2_IMAG (DMRG)
      :ref:`apdx:DMRG` |w---w| CASPT2 Imaginary shift

      * **Type**: double
      * **Default**: 0.0

   DMRG_CASPT2_IPEA (DMRG)
      :ref:`apdx:DMRG` |w---w| CASPT2 IPEA shift

      * **Type**: double
      * **Default**: 0.0

   DMRG_CASPT2_ORBS (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done.

      * **Type**: string
      * **Possible Values**: PSEUDOCANONICAL, ACTIVE
      * **Default**: PSEUDOCANONICAL

   DMRG_DIIS (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to use DIIS for DMRG.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_DIIS_WRITE (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to store the DIIS checkpoint on disk (convenient for restarting).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DMRG_EXCITATION (DMRG)
      :ref:`apdx:DMRG` |w---w| Which root is targeted: 0 means ground state, 1 first excited state, etc.

      * **Type**: integer
      * **Default**: 0

   DMRG_IRREP (DMRG)
      :ref:`apdx:DMRG` |w---w| The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it's copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A' A'' 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u

      * **Type**: integer
      * **Default**: -1

   DMRG_LOCAL_INIT (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether to start the active space localization process from a random unitary matrix instead of a unit matrix.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DMRG_MOLDEN_WRITE (DMRG)
      :ref:`apdx:DMRG` |w---w| DMRG-CI or converged DMRG-SCF orbitals in molden format

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_MPS_WRITE (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to create intermediary MPS checkpoints

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_MULTIPLICITY (DMRG)
      :ref:`apdx:DMRG` |w---w| The DMRG wavefunction multiplicity in the form (2S+1)

      * **Type**: integer
      * **Default**: -1

   DMRG_OPDM_AO_PRINT (DMRG)
      :ref:`apdx:DMRG` |w---w| Print out the density matrix in the AO basis

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_PRINT_CORR (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to print the correlation functions after the DMRG calculation

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DMRG_SCF_ACTIVE_SPACE (DMRG)
      :ref:`apdx:DMRG` |w---w| Which active space to use for DMRG calculations: --> input with SCF rotations (INPUT); --> natural orbitals (NO); --> localized and ordered orbitals (LOC)

      * **Type**: string
      * **Possible Values**: INPUT, NO, LOC
      * **Default**: INPUT

   DMRG_SCF_DIIS_THR (DMRG)
      :ref:`apdx:DMRG` |w---w| When the update norm is smaller than this value DIIS starts.

      * **Type**: double
      * **Default**: 1e-2

   DMRG_SCF_GRAD_THR (DMRG)
      :ref:`apdx:DMRG` |w---w| The density RMS convergence to stop an instruction during successive DMRG instructions

      * **Type**: double
      * **Default**: 1.e-6

   DMRG_SCF_MAX_ITER (DMRG)
      :ref:`apdx:DMRG` |w---w| Maximum number of DMRG iterations

      * **Type**: integer
      * **Default**: 100

   DMRG_SCF_STATE_AVG (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to use state-averaging for roots >=2 with DMRG-SCF.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DMRG_SWEEP_DVDSON_RTOL (DMRG)
      :ref:`apdx:DMRG` |w---w| The residual tolerances for the Davidson diagonalization during DMRG instructions

      * **Type**: array
      * **Default**: No Default

   DMRG_SWEEP_ENERGY_CONV (DMRG)
      :ref:`apdx:DMRG` |w---w| The energy convergence to stop an instruction during successive DMRG instructions

      * **Type**: array
      * **Default**: No Default

   DMRG_SWEEP_MAX_SWEEPS (DMRG)
      :ref:`apdx:DMRG` |w---w| The maximum number of sweeps to stop an instruction during successive DMRG instructions

      * **Type**: array
      * **Default**: No Default

   DMRG_SWEEP_NOISE_PREFAC (DMRG)
      :ref:`apdx:DMRG` |w---w| The noise prefactors for successive DMRG instructions

      * **Type**: array
      * **Default**: No Default

   DMRG_SWEEP_STATES (DMRG)
      :ref:`apdx:DMRG` |w---w| The number of reduced renormalized basis states to be retained during successive DMRG instructions

      * **Type**: array
      * **Default**: No Default

   DMRG_UNITARY_WRITE (DMRG)
      :ref:`apdx:DMRG` |w---w| Whether or not to store the unitary on disk (convenient for restarting).

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_DISP (EFP)
      :ref:`apdx:EFP` |w---w| Do include dispersion energy term in EFP computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_DISP_DAMPING (EFP)
      :ref:`apdx:EFP` |w---w| Fragment-fragment dispersion damping type. ``TT`` is a damping formula by Tang and Toennies. ``OVERLAP`` is overlap-based dispersion damping.

      * **Type**: string
      * **Possible Values**: TT, OVERLAP, OFF
      * **Default**: OVERLAP

   EFP_ELST (EFP)
      :ref:`apdx:EFP` |w---w| Do include electrostatics energy term in EFP computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_ELST_DAMPING (EFP)
      :ref:`apdx:EFP` |w---w| Fragment-fragment electrostatic damping type. ``SCREEN`` is a damping formula based on screen group in the EFP potential. ``OVERLAP`` is damping that computes charge penetration energy.

      * **Type**: string
      * **Possible Values**: SCREEN, OVERLAP, OFF
      * **Default**: SCREEN

   EFP_EXCH (EFP)
      :ref:`apdx:EFP` |w---w| Do include exchange repulsion energy term in EFP computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_IND (EFP)
      :ref:`apdx:EFP` |w---w| Do include polarization energy term in EFP computation? (EFP_POL c. v1.1)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_IND_DAMPING (EFP)
      :ref:`apdx:EFP` |w---w| Fragment-fragment polarization damping type. ``TT`` is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1)

      * **Type**: string
      * **Possible Values**: TT, OFF
      * **Default**: TT

   EFP_QM_ELST (EFP)
      :ref:`apdx:EFP` |w---w| Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   EFP_QM_IND (EFP)
      :ref:`apdx:EFP` |w---w| Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PRINT (EFP)
      :ref:`apdx:EFP` |w---w| The amount of information printed to the output file.

      * **Type**: integer
      * **Default**: 1

   DISP_SIZE (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Displacement size in au for finite-differences.

      * **Type**: double
      * **Default**: 0.005

   FD_PROJECT (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   GRADIENT_WRITE (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by |globals__writer_file_label| (if set), or else by the name of the output file plus the name of the current molecule.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   HESSIAN_WRITE (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by |globals__writer_file_label| (if set), or else by the name of the output file plus the name of the current molecule.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   NORMAL_MODES_WRITE (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by |globals__writer_file_label| (if set), or else by the name of the output file plus the name of the current molecule.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   POINTS (FINDIF)
      :ref:`apdx:FINDIF` |w---w| Number of points for finite-differences (3 or 5)

      * **Type**: integer
      * **Default**: 3

   CPHF_R_CONVERGENCE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Convergence criterion for residual of the CPHF coefficients in the SAPT :math:`E_{ind,resp}^{(20)}` term.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   CUBIC_GRID_OVERAGE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each.

      * **Type**: array
      * **Default**: No Default

   CUBIC_GRID_SPACING (FISAPT)
      :ref:`apdx:FISAPT` |w---w| CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each.

      * **Type**: array
      * **Default**: No Default

   FISAPT_CHARGE_COMPLETENESS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Amount of fragment charge completeness to distinguish link bonds

      * **Type**: double
      * **Default**: 0.8

   FISAPT_CUBE_DENSMAT (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Generate cube files for fragment density matrices?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_CUBE_LINKIBOS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Generate cube files for unsplit link orbitals (IBOs)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_CUBE_LINKIHOS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Generate cube files for split link orbitals (IHOs)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_DO_FSAPT (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do an F-SAPT analysis?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FISAPT_DO_FSAPT_DISP (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do F-SAPT Dispersion?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FISAPT_DO_PLOT (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Plot a scalar-field analysis

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_EXCH_PARPERP (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Calculate separate exchange corrections for parallel and perpendicular spin coupling of link orbitals? When false, only the averaged out exchange corrections are computed.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_FSAPT_EXCH_SCALE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do F-SAPT exchange scaling? (ratio of S^\infty to S^2)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FISAPT_FSAPT_FILEPATH (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Filepath to drop F-SAPT data within input file directory

      * **Type**: string
      * **Default**: fsapt/

   FISAPT_FSAPT_IND_RESPONSE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do F-SAPT coupled response? (not recommended)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FISAPT_FSAPT_IND_SCALE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FISAPT_FSSAPT_FILEPATH (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory

      * **Type**: string
      * **Default**: s-fsapt/

   FISAPT_LINK_ASSIGNMENT (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Where do sigma links go (to C, AB, or split into IHOs)?

      * **Type**: string
      * **Possible Values**: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2
      * **Default**: C

   FISAPT_LINK_ORTHO (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Orthogonalization of link orbitals for FISAPT_LINK_ASSIGNMENT=SAOx/SIAOx Link A orthogonalized to A in whole (interacting) molecule or in the (noninteracting) fragment?

      * **Type**: string
      * **Possible Values**: FRAGMENT, WHOLE, NONE
      * **Default**: FRAGMENT

   FISAPT_LINK_SELECTION (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Specification algorithm for link bonds in ISAPT

      * **Type**: string
      * **Possible Values**: AUTOMATIC, MANUAL
      * **Default**: AUTOMATIC

   FISAPT_MANUAL_LINKS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Manual link bond specification [[Atom1, Atom2], ...]

      * **Type**: array
      * **Default**: No Default

   FISAPT_PLOT_FILEPATH (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Filepath to drop scalar data within input file directory

      * **Type**: string
      * **Default**: plot/

   INTS_TOLERANCE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.0

   LOCAL_CONVERGENCE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Relative convergence in orbital localization

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   LOCAL_IBO_POWER (FISAPT)
      :ref:`apdx:FISAPT` |w---w| IBO localization metric power

      * **Type**: integer
      * **Default**: 4

   LOCAL_IBO_STARS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| IBO Centers for Pi Degeneracy

      * **Type**: array
      * **Default**: No Default

   LOCAL_IBO_STARS_COMPLETENESS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| IBO Charge metric for classification as Pi

      * **Type**: double
      * **Default**: 0.90

   LOCAL_IBO_USE_STARS (FISAPT)
      :ref:`apdx:FISAPT` |w---w| IBO Stars procedure

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCAL_MAXITER (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Maximum iterations in localization

      * **Type**: integer
      * **Default**: 1000

   MAXITER (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Maximum number of iterations for CPHF

      * **Type**: integer
      * **Default**: 50

   SSAPT0_SCALE (FISAPT)
      :ref:`apdx:FISAPT` |w---w| Do sSAPT0 exchange-scaling with F-SAPT

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ACTIVE_NAT_ORBS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| An array containing the number of virtual natural orbitals per irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with |fnocc__occ_tolerance|. This keyword overrides |fnocc__occ_tolerance| and |fnocc__occ_percentage|.

      * **Type**: array
      * **Default**: No Default

   BRUECKNER_MAXITER (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Maximum number of iterations for Brueckner orbitals optimization

      * **Type**: integer
      * **Default**: 20

   CC_SCALE_OS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Oppposite-spin scaling factor for SCS-CCSD

      * **Type**: double
      * **Default**: 1.27

   CC_SCALE_SS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Same-spin scaling factor for SCS-CCSD

      * **Type**: double
      * **Default**: 1.13

   CC_TIMINGS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do time each cc diagram?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CEPA_NO_SINGLES (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Flag to exclude singly excited configurations from a coupled-pair computation.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CHOLESKY_TOLERANCE (FNOCC)
      :ref:`apdx:FNOCC` |w---w| tolerance for Cholesky decomposition of the ERI tensor

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-4

   DFCC (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DF_BASIS_CC (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Auxilliary basis for df-ccsd(t).

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DIIS_MAX_VECS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Desired number of DIIS vectors

      * **Type**: integer
      * **Default**: 8

   DIPMOM (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   E_CONVERGENCE (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Convergence criterion for CC energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types. Note that convergence is met only when |fnocc__e_convergence| and |fnocc__r_convergence| are satisfied.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   MAXITER (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Maximum number of CC iterations

      * **Type**: integer
      * **Default**: 100

   MP2_SCALE_OS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Opposite-spin scaling factor for SCS-MP2

      * **Type**: double
      * **Default**: 1.20

   MP2_SCALE_SS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Same-spin scaling factor for SCS-MP2

      * **Type**: double
      * **Default**: 1.0

   NAT_ORBS (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OCC_PERCENTAGE (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is |fnocc__occ_percentage| percent of occupation of the original MP2 virtual space. This option is only used if |fnocc__nat_orbs| = true. This keyword overrides |fnocc__occ_tolerance|.

      * **Type**: double
      * **Default**: 99.0

   OCC_TOLERANCE (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than |fnocc__occ_tolerance| will be discarded. This option is only used if |fnocc__nat_orbs| = true.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   R_CONVERGENCE (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Convergence for the CC amplitudes. Note that convergence is met only when |fnocc__e_convergence| and |fnocc__r_convergence| are satisfied.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-7

   SCS_CCSD (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do SCS-CCSD?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SCS_CEPA (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SCS_MP2 (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do SCS-MP2?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   TRIPLES_LOW_MEMORY (FNOCC)
      :ref:`apdx:FNOCC` |w---w| Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   GDMA_LIMIT (GDMA)
      :ref:`apdx:GDMA` |w---w| The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided.

      * **Type**: integer
      * **Default**: 2

   GDMA_MULTIPOLE_UNITS (GDMA)
      :ref:`apdx:GDMA` |w---w| Whether to print DMA results in atomic units or SI.

      * **Type**: string
      * **Possible Values**: AU
      * **Default**: AU SI

   GDMA_ORIGIN (GDMA)
      :ref:`apdx:GDMA` |w---w| The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point.

      * **Type**: array
      * **Default**: No Default

   GDMA_RADIUS (GDMA)
      :ref:`apdx:GDMA` |w---w| The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom.

      * **Type**: array
      * **Default**: No Default

   GDMA_SWITCH (GDMA)
      :ref:`apdx:GDMA` |w---w| The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA.

      * **Type**: double
      * **Default**: 4.0

   CANONICALIZE_ACTIVE_FAVG (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do canonicalize the active orbitals such that the average Fock matrix is diagonal?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CANONICALIZE_INACTIVE_FAVG (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CI_DIIS (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do use DIIS extrapolation to accelerate convergence of the CI coefficients?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DIIS (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DIIS_MAX_VECS (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Maximum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 7

   DOCC (MCSCF)
      :ref:`apdx:MCSCF` |w---w| The number of doubly occupied orbitals, per irrep

      * **Type**: array
      * **Default**: No Default

   D_CONVERGENCE (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Convergence criterion for density, as measured by the orbital gradient.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   E_CONVERGENCE (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Convergence criterion for energy.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   FAVG (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do use the average Fock matrix during the SCF optimization?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FAVG_START (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Iteration at which to begin using the averaged Fock matrix

      * **Type**: integer
      * **Default**: 5

   FOLLOW_ROOT (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Which solution of the SCF equations to find, where 1 is the SCF ground state

      * **Type**: integer
      * **Default**: 1

   FORCE_TWOCON (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do attempt to force a two configuration solution by starting with CI coefficents of :math:`\pm \sqrt{\frac{1}{2}}` ?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INTERNAL_ROTATIONS (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do consider internal rotations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   LEVEL_SHIFT (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Level shift to aid convergence

      * **Type**: double
      * **Default**: 0.0

   MAXITER (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Maximum number of iterations

      * **Type**: integer
      * **Default**: 100

   MO_READ (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Do read in from file the MOs from a previous computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   REFERENCE (MCSCF)
      :ref:`apdx:MCSCF` |w---w| Reference wavefunction type

      * **Type**: string
      * **Possible Values**: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL
      * **Default**: RHF

   SOCC (MCSCF)
      :ref:`apdx:MCSCF` |w---w| The number of singly occupied orbitals, per irrep

      * **Type**: array
      * **Default**: No Default

   TURN_ON_ACTV (MCSCF)
      :ref:`apdx:MCSCF` |w---w| 

      * **Type**: integer
      * **Default**: 0

   WFN_SYM (MCSCF)
      :ref:`apdx:MCSCF` |w---w| The symmetry of the SCF wavefunction.

      * **Type**: string
      * **Default**: 1

   BASIS (MINTS)
      :ref:`apdx:MINTS` |w---w| Primary basis set. :ref:`Available basis sets <apdx:basisElement>`

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   OMEGA_ERF (MINTS)
      :ref:`apdx:MINTS` |w---w| Omega scaling for Erf and Erfc.

      * **Type**: double
      * **Default**: 0.20

   E_CONVERGENCE (MRCC)
      :ref:`apdx:MRCC` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types. This becomes ``tol`` (option \#16) in fort.56.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   INTS_TOLERANCE (MRCC)
      :ref:`apdx:MRCC` |w---w| Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   MRCC_LEVEL (MRCC)
      :ref:`apdx:MRCC` |w---w| Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ``ex.lev`` (option \#1) in fort.56.

      * **Type**: integer
      * **Default**: 2

   MRCC_NUM_DOUBLET_ROOTS (MRCC)
      :ref:`apdx:MRCC` |w---w| Number of root in case of open shell system. This becomes ``ndoub`` (option \#13) int fort.56.

      * **Type**: integer
      * **Default**: 0

   MRCC_NUM_SINGLET_ROOTS (MRCC)
      :ref:`apdx:MRCC` |w---w| Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes ``nsing`` (option \#2) in fort.56.

      * **Type**: integer
      * **Default**: 1

   MRCC_NUM_TRIPLET_ROOTS (MRCC)
      :ref:`apdx:MRCC` |w---w| Number of triplet roots. (Strictly speaking number of of roots with :math:`M_s=0` and S is odd.) See notes at option |mrcc__mrcc_num_singlet_roots|. This becomes ``ntrip`` (option \#3) in fort.56.

      * **Type**: integer
      * **Default**: 0

   CACHELEVEL (OCC)
      :ref:`apdx:OCC` |w---w| Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., :math:`\langle ij | ab \rangle` integrals) may be held in the cache.

      * **Type**: integer
      * **Default**: 2

   CCL_ENERGY (OCC)
      :ref:`apdx:OCC` |w---w| Do compute CC Lambda energy? In order to this option to be valid one should use "TPDM_ABCD_TYPE = COMPUTE" option.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_MAXITER (OCC)
      :ref:`apdx:OCC` |w---w| Maximum number of iterations to determine the amplitudes

      * **Type**: integer
      * **Default**: 50

   CEPA_OS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.27

   CEPA_SOS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.3

   CEPA_SS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.13

   CEPA_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.

      * **Type**: string
      * **Possible Values**: CEPA0
      * **Default**: CEPA0

   CUTOFF (OCC)
      :ref:`apdx:OCC` |w---w| Cutoff value for numerical procedures

      * **Type**: integer
      * **Default**: 14

   DIIS_MAX_VECS (OCC)
      :ref:`apdx:OCC` |w---w| Maximum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 6

   DIIS_MIN_VECS (OCC)
      :ref:`apdx:OCC` |w---w| Minimum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 2

   DO_DIIS (OCC)
      :ref:`apdx:OCC` |w---w| Do apply DIIS extrapolation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_LEVEL_SHIFT (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_SCS (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_SOS (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   E3_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.)

      * **Type**: double
      * **Default**: 0.25

   EA_POLES (OCC)
      :ref:`apdx:OCC` |w---w| Do compute OCC poles for electron affinities? Only valid for OMP2.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EKT_EA (OCC)
      :ref:`apdx:OCC` |w---w| Do compute virtual orbital energies based on extended Koopmans' theorem?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EKT_IP (OCC)
      :ref:`apdx:OCC` |w---w| Do compute occupied orbital energies based on extended Koopmans' theorem?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EP_EA_POLES (OCC)
      :ref:`apdx:OCC` |w---w| Do compute EP-OCC poles for electron affinities? Only valid for OMP2.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EP_IP_POLES (OCC)
      :ref:`apdx:OCC` |w---w| Do compute EP-OCC poles for ionization potentials? Only valid OMP2.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EP_MAXITER (OCC)
      :ref:`apdx:OCC` |w---w| Maximum number of electron propagator iterations.

      * **Type**: integer
      * **Default**: 30

   E_CONVERGENCE (OCC)
      :ref:`apdx:OCC` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   IP_POLES (OCC)
      :ref:`apdx:OCC` |w---w| Do compute OCC poles for ionization potentials? Only valid OMP2.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LEVEL_SHIFT (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 0.02

   MAX_MOGRAD_CONVERGENCE (OCC)
      :ref:`apdx:OCC` |w---w| Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired |occ__e_convergence|. The listed default will be used for the default value of |occ__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   MOGRAD_DAMPING (OCC)
      :ref:`apdx:OCC` |w---w| Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987)

      * **Type**: double
      * **Default**: 1.0

   MO_MAXITER (OCC)
      :ref:`apdx:OCC` |w---w| Maximum number of iterations to determine the orbitals

      * **Type**: integer
      * **Default**: 50

   MO_READ (OCC)
      :ref:`apdx:OCC` |w---w| Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MO_STEP_MAX (OCC)
      :ref:`apdx:OCC` |w---w| Maximum step size in orbital-optimization procedure

      * **Type**: double
      * **Default**: 0.5

   MO_WRITE (OCC)
      :ref:`apdx:OCC` |w---w| Do write coefficient matrices to external files for direct reading MOs in a subsequent job?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MP2_OS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 6.0

   MP2_SOS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.3

   MP2_SOS_SCALE2 (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.2

   MP2_SS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: double
      * **Default**: 1.0

   NAT_ORBS (OCC)
      :ref:`apdx:OCC` |w---w| Do compute natural orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OCC_ORBS_PRINT (OCC)
      :ref:`apdx:OCC` |w---w| Do print OCC orbital energies?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OEPROP (OCC)
      :ref:`apdx:OCC` |w---w| Do compute one electron properties?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OPT_METHOD (OCC)
      :ref:`apdx:OCC` |w---w| The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option.

      * **Type**: string
      * **Possible Values**: MSD, ORB\_RESP
      * **Default**: MSD

   ORB_OPT (OCC)
      :ref:`apdx:OCC` |w---w| Do optimize the orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   ORB_RESP_SOLVER (OCC)
      :ref:`apdx:OCC` |w---w| The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method.

      * **Type**: string
      * **Possible Values**: PCG, LINEQ
      * **Default**: PCG

   ORTH_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| The algorithm for orthogonalization of MOs

      * **Type**: string
      * **Possible Values**: GS, MGS
      * **Default**: MGS

   OS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent.

      * **Type**: double
      * **Default**: 1

   PCG_BETA_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere).

      * **Type**: string
      * **Possible Values**: FLETCHER\_REEVES, POLAK\_RIBIERE
      * **Default**: FLETCHER\_REEVES

   PCG_CONVERGENCE (OCC)
      :ref:`apdx:OCC` |w---w| Convergence criterion for residual vector of preconditioned conjugate gradient method.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   PCG_MAXITER (OCC)
      :ref:`apdx:OCC` |w---w| Maximum number of preconditioned conjugate gradient iterations.

      * **Type**: integer
      * **Default**: 30

   RELAXED (OCC)
      :ref:`apdx:OCC` |w---w| Do consider orbital response contributions for PDMs and GFM?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   REMP_A (OCC)
      :ref:`apdx:OCC` |w---w| mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction

      * **Type**: double
      * **Default**: 0.15e0

   RMS_MOGRAD_CONVERGENCE (OCC)
      :ref:`apdx:OCC` |w---w| Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired |occ__e_convergence|. The listed default will be used for the default value of |occ__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   R_CONVERGENCE (OCC)
      :ref:`apdx:OCC` |w---w| Convergence criterion for amplitudes (residuals).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   SCS_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| Type of the SCS method

      * **Type**: string
      * **Possible Values**: SCS, SCSN, SCSVDW, SCSMI
      * **Default**: SCS

   SOS_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| Type of the SOS method

      * **Type**: string
      * **Possible Values**: SOS, SOSPI
      * **Default**: SOS

   SS_SCALE (OCC)
      :ref:`apdx:OCC` |w---w| A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent.

      * **Type**: double
      * **Default**: 1

   SYMMETRIZE (OCC)
      :ref:`apdx:OCC` |w---w| Do symmetrize the GFM and OPDM in the EKT computations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   TPDM_ABCD_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix.

      * **Type**: string
      * **Possible Values**: DIRECT, COMPUTE
      * **Default**: DIRECT

   WFN_TYPE (OCC)
      :ref:`apdx:OCC` |w---w| Type of the wavefunction.

      * **Type**: string
      * **Possible Values**: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP
      * **Default**: OMP2

   CARTESIAN_SYM_TOLERANCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Tolerance for symmetrizing cartesian geometry between steps

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   CONSECUTIVE_BACKSTEPS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Set number of consecutive backward steps allowed in optimization

      * **Type**: integer
      * **Default**: 0

   DYNAMIC_LEVEL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Starting level for dynamic optimization (0=nondynamic, higher=>more conservative)

      * **Type**: integer
      * **Default**: 0

   ENSURE_BT_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   EXT_FORCE_BEND (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify formula for external forces for angles between atoms

      * **Type**: string
      * **Default**: No Default

   EXT_FORCE_CARTESIAN (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Symmetry formula for external forces for cartesian coordinates on atoms .

      * **Type**: string
      * **Default**: No Default

   EXT_FORCE_DIHEDRAL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify formula for external forces for dihedral angles between atoms

      * **Type**: string
      * **Default**: No Default

   EXT_FORCE_DISTANCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify formula for external forces for the distance between atoms

      * **Type**: string
      * **Default**: No Default

   EXT_FORCE_OOFP (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify formula for external forces for out-of-plane angles between atoms

      * **Type**: string
      * **Default**: No Default

   FROZEN_BEND (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify angles between atoms to be frozen (unchanged)

      * **Type**: string
      * **Default**: No Default

   FROZEN_CARTESIAN (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify atom and X, XY, XYZ, ... to be frozen (unchanged)

      * **Type**: string
      * **Default**: No Default

   FROZEN_DIHEDRAL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify dihedral angles between atoms to be frozen (unchanged)

      * **Type**: string
      * **Default**: No Default

   FROZEN_DISTANCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify distances between atoms to be frozen (unchanged)

      * **Type**: string
      * **Default**: No Default

   FROZEN_OOFP (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify out-of-plane angles between atoms to be frozen (unchanged)

      * **Type**: string
      * **Default**: No Default

   GEOM_MAXITER (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Maximum number of geometry optimization steps

      * **Type**: integer
      * **Default**: 50

   H_UPDATE_DEN_TOL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Denominator check for hessian update.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   INTERFRAG_STEP_LIMIT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Maximum step size in bohr or radian along an interfragment coordinate

      * **Type**: double
      * **Default**: 0.5

   INTRAFRAG_STEP_LIMIT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Initial maximum step size in bohr or radian along an internal coordinate

      * **Type**: double
      * **Default**: 0.5

   INTRAFRAG_STEP_LIMIT_MAX (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Upper bound for dynamic trust radius [au]

      * **Type**: double
      * **Default**: 1.0

   INTRAFRAG_STEP_LIMIT_MIN (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Lower bound for dynamic trust radius [au]

      * **Type**: double
      * **Default**: 0.001

   IRC_DIRECTION (OPTKING)
      :ref:`apdx:OPTKING` |w---w| IRC mapping direction

      * **Type**: string
      * **Possible Values**: FORWARD, BACKWARD
      * **Default**: FORWARD

   IRC_POINTS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Maximum number of IRC points to collect before stopping.

      * **Type**: integer
      * **Default**: 20

   IRC_STEP_SIZE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| IRC step size in bohr(amu)\ :math:`^{1/2}`.

      * **Type**: double
      * **Default**: 0.2

   OPT_COORDINATES (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates.

      * **Type**: string
      * **Possible Values**: REDUNDANT, INTERNAL, CARTESIAN, BOTH
      * **Default**: INTERNAL

   OPT_TYPE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specifies minimum search, transition-state search, or IRC following

      * **Type**: string
      * **Possible Values**: MIN, TS, IRC
      * **Default**: MIN

   PRINT_OPT_PARAMS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Print all optking parameters.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RANGED_BEND (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify range for angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_BEND

      * **Type**: string
      * **Default**: No Default

   RANGED_DIHEDRAL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify range for the dihedral angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DIHEDRAL

      * **Type**: string
      * **Default**: No Default

   RANGED_DISTANCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify range for distances between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DISTANCE

      * **Type**: string
      * **Default**: No Default

   RANGED_OOFP (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify range for the out-of-plane angles between atoms to be constrained to (eq. value specified) analogous to the old FIXED_<COORD> keyword

      * **Type**: string
      * **Default**: No Default

   RFO_FOLLOW_ROOT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do follow the initial RFO vector after the first step?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RFO_NORMALIZATION_MAX (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Eigenvectors of RFO matrix whose final column is smaller than this are ignored.

      * **Type**: double
      * **Default**: 100

   RFO_ROOT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Root for RFO to follow, 0 being lowest (for a minimum)

      * **Type**: integer
      * **Default**: 0

   RSRFO_ALPHA_MAX (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Absolute maximum value of RS-RFO.

      * **Type**: double
      * **Default**: 1e8

   STEP_TYPE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Geometry optimization step type, either Newton-Raphson or Rational Function Optimization

      * **Type**: string
      * **Possible Values**: RFO, P\_RFO, NR, SD, LINESEARCH
      * **Default**: RFO

   FLEXIBLE_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Even if a user-defined threshold is set, allow for normal, flexible convergence criteria

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless |optking__flexible_g_convergence| is also on. See Table :ref:`Geometry Convergence <table:optkingconv>` for details.

      * **Type**: string
      * **Possible Values**: QCHEM, MOLPRO, GAU, GAU\_LOOSE, GAU\_TIGHT, INTERFRAG\_TIGHT, GAU\_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM\_LOOSE
      * **Default**: QCHEM

   MAX_DISP_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.2e-3

   MAX_ENERGY_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Convergence criterion for geometry optmization: maximum energy change.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   MAX_FORCE_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 3.0e-4

   RMS_DISP_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.2e-3

   RMS_FORCE_G_CONVERGENCE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 3.0e-4

   CART_HESS_READ (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do read Cartesian Hessian? Only for experts - use |optking__full_hess_every| instead.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FULL_HESS_EVERY (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian.

      * **Type**: integer
      * **Default**: -1

   HESS_UPDATE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Hessian update scheme

      * **Type**: string
      * **Possible Values**: NONE, BFGS, MS, POWELL, BOFILL
      * **Default**: BFGS

   HESS_UPDATE_LIMIT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do limit the magnitude of changes caused by the Hessian update?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   HESS_UPDATE_LIMIT_MAX (OPTKING)
      :ref:`apdx:OPTKING` |w---w| If |optking__hess_update_limit| is true, changes to the Hessian from the update are limited to the larger of |optking__hess_update_limit_scale| * (the previous value) and HESS_UPDATE_LIMIT_MAX [au].

      * **Type**: double
      * **Default**: 1.00

   HESS_UPDATE_LIMIT_SCALE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| If |optking__hess_update_limit| is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and |optking__hess_update_limit_max| [au].

      * **Type**: double
      * **Default**: 0.50

   HESS_UPDATE_USE_LAST (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Number of previous steps to use in Hessian update, 0 uses all

      * **Type**: integer
      * **Default**: 4

   INTRAFRAG_HESS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Model Hessian to guess intrafragment force constants

      * **Type**: string
      * **Possible Values**: FISCHER, SCHLEGEL, SIMPLE, LINDH, LINDH\_SIMPLE
      * **Default**: SCHLEGEL

   ADD_AUXILIARY_BONDS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do add bond coordinates at nearby atoms for non-bonded systems?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   AUXILIARY_BOND_FACTOR (OPTKING)
      :ref:`apdx:OPTKING` |w---w| This factor times standard covalent distance is used to add extra stretch coordinates.

      * **Type**: double
      * **Default**: 2.5

   COVALENT_CONNECT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii.

      * **Type**: double
      * **Default**: 1.3

   FRAG_MODE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in ``MULTI`` mode, the interfragment coordinates are not redundant.

      * **Type**: string
      * **Possible Values**: SINGLE, MULTI
      * **Default**: SINGLE

   FRAG_REF_ATOMS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Specify atoms to use for reference points in interfragment coordinates

      * **Type**: array
      * **Default**: No Default

   FREEZE_INTERFRAG (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do freeze all interfragment modes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FREEZE_INTRAFRAG (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do freeze all fragments rigid?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   H_BOND_CONNECT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| For now, this is a general maximum distance for the definition of H-bonds

      * **Type**: double
      * **Default**: 4.3

   H_GUESS_EVERY (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INTCOS_GENERATE_EXIT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do only generate the internal coordinates and then stop?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INTERFRAGMENT_CONNECT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| When connecting disparate fragments when frag_mode = SIMPLE, a "bond" is assigned if interatomic distance is less than (this number) * sum of covalent radii. The value is then increased until all the fragments are connected (directly or indirectly).

      * **Type**: double
      * **Default**: 1.8

   INTERFRAG_COLLINEAR_TOL (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Tolerance for whether to reject a set of generated reference atoms due to collinearity

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.01

   INTERFRAG_COORDS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Dictionary to define a dimer. Contains "Natoms per frag", "A Frag", "A Ref Atoms", "B Frag", and "B Ref Atoms"

      * **Type**: string
      * **Default**: No Default

   INTERFRAG_DIST_INV (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Use 1/R for the interfragment stretching coordinate instead of R

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INTERFRAG_HESS (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Model Hessian to guess interfragment force constants

      * **Type**: string
      * **Possible Values**: DEFAULT, FISCHER\_LIKE
      * **Default**: DEFAULT

   INTERFRAG_MODE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms.

      * **Type**: string
      * **Possible Values**: FIXED, PRINCIPAL\_AXES
      * **Default**: FIXED

   OPT_RESTART (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Restart the optimization from optking's written history

      * **Type**: double
      * **Default**: 0

   PRINT_TRAJECTORY_XYZ_FILE (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Should an xyz trajectory file be kept (useful for visualization)?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SAVE_OPTIMIZATION (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Save OptKing's internal classes for possible restart upon error

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   TEST_B (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do test B matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   TEST_DERIVATIVE_B (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Do test derivative B matrix?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WRITE_OPT_HISTORY (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Write the full history to disk. Produces a non validated OptimizationResult.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WRITE_OPT_RESULT (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Write the optimization history / state to disc

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WRITE_TRAJECTORY (OPTKING)
      :ref:`apdx:OPTKING` |w---w| Write Optimization Trajectory

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PCM_CC_TYPE (PCM)
      :ref:`apdx:PCM` |w---w| PCM-CCSD algorithm type.

      * **Type**: string
      * **Possible Values**: PTE
      * **Default**: PTE

   BORDER (PE)
      :ref:`apdx:PE` |w---w| Activate border options for sites in proximity to the QM/MM border

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   BORDER_N_REDIST (PE)
      :ref:`apdx:PE` |w---w| number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region

      * **Type**: integer
      * **Default**: -1

   BORDER_REDIST_ORDER (PE)
      :ref:`apdx:PE` |w---w| order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed

      * **Type**: integer
      * **Default**: 1

   BORDER_REDIST_POL (PE)
      :ref:`apdx:PE` |w---w| redistribute polarizabilities? If false, polarizabilities are removed (default)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   BORDER_RMIN (PE)
      :ref:`apdx:PE` |w---w| minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution

      * **Type**: double
      * **Default**: 2.2

   BORDER_RMIN_UNIT (PE)
      :ref:`apdx:PE` |w---w| unit of BORDER_RMIN, default is atomic units (AU)

      * **Type**: string
      * **Possible Values**: AU, AA
      * **Default**: AU

   BORDER_TYPE (PE)
      :ref:`apdx:PE` |w---w| border type, either remove or redistribute moments/polarizabilities

      * **Type**: string
      * **Possible Values**: REMOVE, REDIST
      * **Default**: REMOVE

   DAMPING_FACTOR_INDUCED (PE)
      :ref:`apdx:PE` |w---w| Thole damping factor for induced moments

      * **Type**: double
      * **Default**: 2.1304

   DAMPING_FACTOR_MULTIPOLE (PE)
      :ref:`apdx:PE` |w---w| Thole damping factor for multipole fields

      * **Type**: double
      * **Default**: 2.1304

   DAMP_INDUCED (PE)
      :ref:`apdx:PE` |w---w| Enable Thole damping for induced moments

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DAMP_MULTIPOLE (PE)
      :ref:`apdx:PE` |w---w| Enable Thole damping for multipole fields

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INDUCED_CONVERGENCE (PE)
      :ref:`apdx:PE` |w---w| Threshold for induced moments convergence

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   ISOTROPIC_POL (PE)
      :ref:`apdx:PE` |w---w| Make polarizabilities isotropic

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MAXITER (PE)
      :ref:`apdx:PE` |w---w| Maximum number of iterations for induced moments

      * **Type**: integer
      * **Default**: 50

   PE_ECP (PE)
      :ref:`apdx:PE` |w---w| use PE(ECP) repulsive potentials

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   POTFILE (PE)
      :ref:`apdx:PE` |w---w| Name of the potential file OR contents of potential file to be written anonymously on-the-fly.

      * **Type**: string
      * **Default**: potfile.pot

   SUMMATION_FIELDS (PE)
      :ref:`apdx:PE` |w---w| Summation scheme for field computations, can be direct or fmm

      * **Type**: string
      * **Possible Values**: DIRECT, FMM
      * **Default**: DIRECT

   TREE_EXPANSION_ORDER (PE)
      :ref:`apdx:PE` |w---w| Expansion order of the multipoles for FMM

      * **Type**: integer
      * **Default**: 5

   TREE_THETA (PE)
      :ref:`apdx:PE` |w---w| Opening angle theta

      * **Type**: double
      * **Default**: 0.5

   CC_NUM_THREADS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Number of threads

      * **Type**: integer
      * **Default**: 1

   CORR_ANSATZ (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The ansatz to use for MRCC computations

      * **Type**: string
      * **Possible Values**: SR, MK, BW, APBW
      * **Default**: MK

   CORR_CCSD_T (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The type of CCSD(T) computation to perform

      * **Type**: string
      * **Possible Values**: STANDARD, PITTNER
      * **Default**: STANDARD

   CORR_CHARGE (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The molecular charge of the target state

      * **Type**: integer
      * **Default**: 0

   CORR_MULTP (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The multiplicity, :math:`M_S(M_S+1)`, of the target state. Must be specified if different from the reference :math:`M_s`.

      * **Type**: integer
      * **Default**: 1

   CORR_WFN (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The type of correlated wavefunction

      * **Type**: string
      * **Possible Values**: PT2, CCSD, MP2-CCSD, CCSD\_T
      * **Default**: CCSD

   COUPLING (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The order of coupling terms to include in MRCCSDT computations

      * **Type**: string
      * **Possible Values**: NONE, LINEAR, QUADRATIC, CUBIC
      * **Default**: CUBIC

   COUPLING_TERMS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do include the terms that couple the reference determinants?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DAMPING_PERCENTAGE (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20\% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed.

      * **Type**: double
      * **Default**: 0.0

   DIAGONALIZE_HEFF (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do diagonalize the effective Hamiltonian?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DIAGONAL_CCSD_T (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do include the diagonal corrections in (T) computations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DIIS_MAX_VECS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Maximum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 7

   DIIS_START (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The number of DIIS vectors needed before extrapolation is performed

      * **Type**: integer
      * **Default**: 2

   E_CONVERGENCE (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Convergence criterion for energy. See Table :ref:`Post-SCF Convergence <table:conv_corl>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   FAVG_CCSD_T (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do use the averaged Fock matrix over all references in (T) computations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FOLLOW_ROOT (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Which root of the effective hamiltonian is the target state?

      * **Type**: integer
      * **Default**: 1

   HEFF4 (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do include the fourth-order contributions to the effective Hamiltonian?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   HEFF_PRINT (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do print the effective Hamiltonian?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   LOCK_SINGLET (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do lock onto a singlet root?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MAXITER (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Maximum number of iterations to determine the amplitudes

      * **Type**: integer
      * **Default**: 100

   MP2_CCSD_METHOD (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| How to perform MP2_CCSD computations

      * **Type**: string
      * **Possible Values**: I, IA, II
      * **Default**: II

   MP2_GUESS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do start from a MP2 guess?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NO_SINGLES (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do disregard updating single excitation amplitudes?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   OFFDIAGONAL_CCSD_T (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do include the off-diagonal corrections in (T) computations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PERTURB_CBS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PERTURB_CBS_COUPLING (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Removed in 1.4. Will raise an error in 1.5.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PT_ENERGY (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The type of perturbation theory computation to perform

      * **Type**: string
      * **Default**: SECOND\_ORDER

   R_CONVERGENCE (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Convergence criterion for amplitudes (residuals).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-9

   SMALL_CUTOFF (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| 

      * **Type**: integer
      * **Default**: 0

   TIKHONOW_MAX (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations

      * **Type**: integer
      * **Default**: 5

   TIKHONOW_OMEGA (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The shift to apply to the denominators, {\it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009)

      * **Type**: double
      * **Default**: 0.0

   TRIPLES_ALGORITHM (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The type of algorithm to use for (T) computations

      * **Type**: string
      * **Possible Values**: SPIN\_ADAPTED, RESTRICTED, UNRESTRICTED
      * **Default**: RESTRICTED

   TRIPLES_DIIS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   USE_SPIN_SYM (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do use symmetry to map equivalent determinants onto each other, for efficiency?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   WFN_SYM (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| The symmetry of the target wavefunction, specified either by Sch\ |o_dots|\ nflies symbol, or irrep number (in Cotton ordering)

      * **Type**: string
      * **Default**: 1

   ZERO_INTERNAL_AMPS (PSIMRCC)
      :ref:`apdx:PSIMRCC` |w---w| Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   AIO_CPHF (SAPT)
      :ref:`apdx:SAPT` |w---w| Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   AIO_DF_INTS (SAPT)
      :ref:`apdx:SAPT` |w---w| Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   BASIS (SAPT)
      :ref:`apdx:SAPT` |w---w| Primary basis set, describes the monomer molecular orbitals

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   CCD_E_CONVERGENCE (SAPT)
      :ref:`apdx:SAPT` |w---w| E converge value for CCD

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   CCD_MAXITER (SAPT)
      :ref:`apdx:SAPT` |w---w| Max CCD iterations

      * **Type**: integer
      * **Default**: 50

   CCD_T_CONVERGENCE (SAPT)
      :ref:`apdx:SAPT` |w---w| Convergence tolerance for CCD amplitudes

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   CPHF_R_CONVERGENCE (SAPT)
      :ref:`apdx:SAPT` |w---w| Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT :math:`E_{ind,resp}^{(20)}` term. This applies to wavefunction-based SAPT or SAPT(DFT). See |fisapt__cphf_r_convergence| for fragment-partitioned or intramolecular SAPT.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   DENOMINATOR_ALGORITHM (SAPT)
      :ref:`apdx:SAPT` |w---w| Denominator algorithm for PT methods. Laplace transformations are slightly more efficient.

      * **Type**: string
      * **Possible Values**: LAPLACE, CHOLESKY
      * **Default**: LAPLACE

   DENOMINATOR_DELTA (SAPT)
      :ref:`apdx:SAPT` |w---w| Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the :math:`E_{disp}^{(20)}` and :math:`E_{exch-disp}^{(20)}` evaluation.

      * **Type**: double
      * **Default**: 1.0e-6

   DF_BASIS_ELST (SAPT)
      :ref:`apdx:SAPT` |w---w| Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. :ref:`Defaults <apdx:basisFamily>` to a JKFIT basis. Previous to v1.6, defaulted to |sapt__df_basis_sapt|. See :ref:`fitting notes <sec:saptfitA>` .

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DF_BASIS_SAPT (SAPT)
      :ref:`apdx:SAPT` |w---w| Auxiliary basis set for SAPT density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a RI basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   EXCH_SCALE_ALPHA (SAPT)
      :ref:`apdx:SAPT` |w---w| Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with :math:`Exch10 / Exch10(S^2)`. If set to a value :math:`\alpha`, performs scaling with :math:`(Exch10 / Exch10(S^2))^{\alpha}`.

      * **Type**: string
      * **Default**: FALSE

   FREEZE_CORE (SAPT)
      :ref:`apdx:SAPT` |w---w| The scope of core orbitals to freeze in evaluation of SAPT :math:`E_{disp}^{(20)}` and :math:`E_{exch-disp}^{(20)}` terms. Recommended true for all SAPT computations

      * **Type**: string
      * **Possible Values**: FALSE, TRUE
      * **Default**: FALSE

   INTS_TOLERANCE (SAPT)
      :ref:`apdx:SAPT` |w---w| Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn't much to be gained from loosening it, especially for higher-order SAPT.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   MAXITER (SAPT)
      :ref:`apdx:SAPT` |w---w| Maximum number of CPHF iterations

      * **Type**: integer
      * **Default**: 50

   MAX_CCD_DIISVECS (SAPT)
      :ref:`apdx:SAPT` |w---w| Maximum number of vectors used in CCD-DIIS

      * **Type**: integer
      * **Default**: 10

   MIN_CCD_DIISVECS (SAPT)
      :ref:`apdx:SAPT` |w---w| Minimum number of vectors used in CCD-DIIS

      * **Type**: integer
      * **Default**: 4

   NAT_ORBS_T2 (SAPT)
      :ref:`apdx:SAPT` |w---w| Do use MP2 natural orbital approximations for the :math:`v^4` block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NAT_ORBS_T3 (SAPT)
      :ref:`apdx:SAPT` |w---w| Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NAT_ORBS_V4 (SAPT)
      :ref:`apdx:SAPT` |w---w| Do use MP2 natural orbital approximations for the :math:`v^4` block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   OCC_TOLERANCE (SAPT)
      :ref:`apdx:SAPT` |w---w| Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   PRINT (SAPT)
      :ref:`apdx:SAPT` |w---w| The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed.

      * **Type**: integer
      * **Default**: 1

   SAPT_LEVEL (SAPT)
      :ref:`apdx:SAPT` |w---w| The level of theory for SAPT

      * **Type**: string
      * **Possible Values**: SAPT0, SAPT2, SAPT2+, SAPT2+3
      * **Default**: SAPT0

   SAPT_MEM_CHECK (SAPT)
      :ref:`apdx:SAPT` |w---w| Do force SAPT2 and higher to die if it thinks there isn't enough memory? Turning this off is ill-advised.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SAPT_MEM_SAFETY (SAPT)
      :ref:`apdx:SAPT` |w---w| Memory safety

      * **Type**: double
      * **Default**: 0.9

   SAPT_DFT_DO_DHF (SAPT)
      :ref:`apdx:SAPT` |w---w| Compute the Delta-HF correction?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SAPT_DFT_EXCH_DISP_SCALE_SCHEME (SAPT)
      :ref:`apdx:SAPT` |w---w| Scheme for approximating exchange-dispersion for SAPT-DFT. Previous to Nov 2022, default was ``FIXED`` with Hesselmann value. ``NONE`` Use unscaled ``Exch-Disp2,u`` . ``FIXED`` Use a fixed factor |sapt__sapt_dft_exch_disp_fixed_scale| to scale ``Exch-Disp2,u`` . ``DISP`` Use the ratio of ``Disp2,r`` and ``Disp2,u`` to scale ``Exch-Disp2,u`` .

      * **Type**: string
      * **Possible Values**: NONE, FIXED, DISP
      * **Default**: FIXED

   SAPT_DFT_GRAC_SHIFT_A (SAPT)
      :ref:`apdx:SAPT` |w---w| Monomer A GRAC shift in Hartree

      * **Type**: double
      * **Default**: 0.0

   SAPT_DFT_GRAC_SHIFT_B (SAPT)
      :ref:`apdx:SAPT` |w---w| Monomer B GRAC shift in Hartree

      * **Type**: double
      * **Default**: 0.0

   BASIS (SCF)
      :ref:`apdx:SCF` |w---w| Primary basis set

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   CHOLESKY_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| Tolerance for Cholesky decomposition of the ERI tensor

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   DF_BASIS_SCF (SCF)
      :ref:`apdx:SCF` |w---w| Auxiliary basis set for SCF density fitting computations. :ref:`Defaults <apdx:basisFamily>` to a JKFIT basis.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: No Default

   DF_SCF_GUESS (SCF)
      :ref:`apdx:SCF` |w---w| Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a |globals__scf_type| ``DIRECT`` calculation

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   GUESS (SCF)
      :ref:`apdx:SCF` |w---w| The type of guess orbitals. See :ref:`sec:scfguess` for what the options mean and what the defaults are.

      * **Type**: string
      * **Possible Values**: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ
      * **Default**: AUTO

   GUESS_MIX (SCF)
      :ref:`apdx:SCF` |w---w| Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   GUESS_PERSIST (SCF)
      :ref:`apdx:SCF` |w---w| If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INTS_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-12

   MAX_MEM_BUF (SCF)
      :ref:`apdx:SCF` |w---w| Max memory per buf for PK algo REORDER, for debug and tuning

      * **Type**: integer
      * **Default**: 0

   MOLDEN_WRITE (SCF)
      :ref:`apdx:SCF` |w---w| Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by |globals__writer_file_label| (if set), or else by the name of the output file plus the name of the current molecule.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ORBITALS_WRITE (SCF)
      :ref:`apdx:SCF` |w---w| File name (case sensitive) to which to serialize Wavefunction orbital data.

      * **Type**: string
      * **Default**: No Default

   PRINT_BASIS (SCF)
      :ref:`apdx:SCF` |w---w| Do print the basis set?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PRINT_MOS (SCF)
      :ref:`apdx:SCF` |w---w| Do print the molecular orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   QCHF (SCF)
      :ref:`apdx:SCF` |w---w| Do perform a QCHF computation?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   REFERENCE (SCF)
      :ref:`apdx:SCF` |w---w| Reference wavefunction type. **Cfour Interface:** Keyword translates into |cfour__cfour_reference|.

      * **Type**: string
      * **Possible Values**: RHF, ROHF, UHF, CUHF, RKS, UKS
      * **Default**: RHF

   SAPGAU_BASIS (SCF)
      :ref:`apdx:SCF` |w---w| The potential basis set used for the SAPGAU guess

      * **Type**: string
      * **Default**: sap\_helfem\_large

   SAVE_JK (SCF)
      :ref:`apdx:SCF` |w---w| Keep JK object for later use?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SCF_MEM_SAFETY_FACTOR (SCF)
      :ref:`apdx:SCF` |w---w| Memory safety factor for allocating JK

      * **Type**: double
      * **Default**: 0.75

   SCF_PROPERTIES (SCF)
      :ref:`apdx:SCF` |w---w| SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations.

      * **Type**: array
      * **Default**: No Default

   S_CHOLESKY_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| Tolerance for partial Cholesky decomposition of overlap matrix.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-8

   S_ORTHOGONALIZATION (SCF)
      :ref:`apdx:SCF` |w---w| SO orthogonalization: automatic, symmetric, or canonical?

      * **Type**: string
      * **Possible Values**: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY
      * **Default**: AUTO

   S_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| Minimum S matrix eigenvalue to allow before linear dependencies are removed.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   BASIS_GUESS (SCF)
      :ref:`apdx:SCF` |w---w| Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of ``TRUE`` turns on projection using the :ref:`Defaults <apdx:basisFamily>` small basis set 3-21G, pcseg-0, or def2-SV(P).

      * **Type**: string
      * **Default**: FALSE

   DAMPING_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. **Cfour Interface:** Keyword translates into |cfour__cfour_scf_damping|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-18

   DAMPING_PERCENTAGE (SCF)
      :ref:`apdx:SCF` |w---w| The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20\% of the previous iteration's density being mixed into the current density) could help to solve problems with oscillatory convergence.

      * **Type**: double
      * **Default**: 0.0

   DF_BASIS_GUESS (SCF)
      :ref:`apdx:SCF` |w---w| When |scf__basis_guess| is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of ``TRUE`` turns on density fitting with the default basis, otherwise the specified basis is used.

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: FALSE

   DIIS (SCF)
      :ref:`apdx:SCF` |w---w| Do use DIIS extrapolation to accelerate convergence?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DIIS_MAX_VECS (SCF)
      :ref:`apdx:SCF` |w---w| Maximum number of error vectors stored for DIIS extrapolation

      * **Type**: integer
      * **Default**: 10

   DIIS_MIN_VECS (SCF)
      :ref:`apdx:SCF` |w---w| Minimum number of error vectors stored for DIIS extrapolation. Will be removed in v1.7.

      * **Type**: integer
      * **Default**: 2

   DIIS_RMS_ERROR (SCF)
      :ref:`apdx:SCF` |w---w| Use RMS error instead of the more robust absolute error?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DIIS_START (SCF)
      :ref:`apdx:SCF` |w---w| The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS.

      * **Type**: integer
      * **Default**: 1

   D_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table :ref:`SCF Convergence & Algorithm <table:conv_scf>` for default convergence criteria for different calculation types. **Cfour Interface:** Keyword translates into |cfour__cfour_scf_conv|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   E_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence criterion for SCF energy. See Table :ref:`SCF Convergence & Algorithm <table:conv_scf>` for default convergence criteria for different calculation types.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-6

   FAIL_ON_MAXITER (SCF)
      :ref:`apdx:SCF` |w---w| Fail if we reach maxiter without converging?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   INCFOCK (SCF)
      :ref:`apdx:SCF` |w---w| Do perform incremental Fock build?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   INCFOCK_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| The density threshold at which to stop building the Fock matrix incrementally

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-5

   INCFOCK_FULL_FOCK_EVERY (SCF)
      :ref:`apdx:SCF` |w---w| Frequency with which to compute the full Fock matrix if using |scf__incfock| . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure.

      * **Type**: integer
      * **Default**: 5

   LEVEL_SHIFT (SCF)
      :ref:`apdx:SCF` |w---w| Do use a level shift?

      * **Type**: double
      * **Default**: 0.0

   LEVEL_SHIFT_CUTOFF (SCF)
      :ref:`apdx:SCF` |w---w| DIIS error at which to stop applying the level shift

      * **Type**: double
      * **Default**: 1e-2

   LINK_INTS_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| The screening tolerance used for ERI/Density sparsity in the LinK algorithm

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   MAXITER (SCF)
      :ref:`apdx:SCF` |w---w| Maximum number of iterations. **Cfour Interface:** Keyword translates into |cfour__cfour_scf_maxcyc|.

      * **Type**: integer
      * **Default**: 100

   MOM_OCC (SCF)
      :ref:`apdx:SCF` |w---w| The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta)

      * **Type**: array
      * **Default**: No Default

   MOM_START (SCF)
      :ref:`apdx:SCF` |w---w| The iteration to start MOM on (or 0 for no MOM)

      * **Type**: integer
      * **Default**: 0

   MOM_VIR (SCF)
      :ref:`apdx:SCF` |w---w| The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta)

      * **Type**: array
      * **Default**: No Default

   SCF_INITIAL_ACCELERATOR (SCF)
      :ref:`apdx:SCF` |w---w| Use a method to accelerate initial SCF convergence? Use ``NONE`` for DIIS alone (if enabled) and ``EDIIS`` or ``ADIIS`` to have both the chosen accelerator and DIIS (if enabled). For restricted-open references, ``EDIIS`` and ``ADIIS`` have no effect.

      * **Type**: string
      * **Possible Values**: NONE, EDIIS, ADIIS
      * **Default**: ADIIS

   SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)
      :ref:`apdx:SCF` |w---w| SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249

      * **Type**: double
      * **Default**: 1.0e-4

   SCF_INITIAL_START_DIIS_TRANSITION (SCF)
      :ref:`apdx:SCF` |w---w| SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249

      * **Type**: double
      * **Default**: 1.0e-1

   SOLVER_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence threshold (max 2-norm) for numerical solvers (instability analysis and CPHF/CPKS).

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-6

   SOLVER_MAXITER (SCF)
      :ref:`apdx:SCF` |w---w| Maximum iterations for numerical solvers (instability analysis and CPHF/CPKS).

      * **Type**: integer
      * **Default**: 100

   SOLVER_N_GUESS (SCF)
      :ref:`apdx:SCF` |w---w| Number of guess vectors per root for instability analysis.

      * **Type**: integer
      * **Default**: 1

   SOLVER_N_ROOT (SCF)
      :ref:`apdx:SCF` |w---w| Number of roots to converge for all irreps during instability analysis. (Overridden by SOLVER_ROOTS_PER_IRREP.)

      * **Type**: integer
      * **Default**: 1

   SOLVER_ROOTS_PER_IRREP (SCF)
      :ref:`apdx:SCF` |w---w| Number of roots to converge, per irrep, during instability analysis. (Overrides SOLVER_N_ROOT.)

      * **Type**: array
      * **Default**: No Default

   SOSCF (SCF)
      :ref:`apdx:SCF` |w---w| Do use second-order SCF convergence methods?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SOSCF_CONV (SCF)
      :ref:`apdx:SCF` |w---w| Second order convergence threshold. Cease microiterating at this value.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 5.0e-3

   SOSCF_MAX_ITER (SCF)
      :ref:`apdx:SCF` |w---w| Maximum number of second-order microiterations to perform.

      * **Type**: integer
      * **Default**: 5

   SOSCF_MIN_ITER (SCF)
      :ref:`apdx:SCF` |w---w| Minimum number of second-order microiterations to perform.

      * **Type**: integer
      * **Default**: 1

   SOSCF_PRINT (SCF)
      :ref:`apdx:SCF` |w---w| Do we print the SOSCF microiterations?.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SOSCF_START_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| When to start second-order SCF iterations based on gradient RMS.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-2

   STABILITY_ANALYSIS (SCF)
      :ref:`apdx:SCF` |w---w| Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution.

      * **Type**: string
      * **Possible Values**: NONE, CHECK, FOLLOW
      * **Default**: NONE

   FRAC_DIIS (SCF)
      :ref:`apdx:SCF` |w---w| Do use DIIS extrapolation to accelerate convergence in frac?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FRAC_LOAD (SCF)
      :ref:`apdx:SCF` |w---w| Do recompute guess from stored orbitals?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FRAC_OCC (SCF)
      :ref:`apdx:SCF` |w---w| The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta)

      * **Type**: array
      * **Default**: No Default

   FRAC_RENORMALIZE (SCF)
      :ref:`apdx:SCF` |w---w| Do renormalize C matrices prior to writing to checkpoint?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   FRAC_START (SCF)
      :ref:`apdx:SCF` |w---w| The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation)

      * **Type**: integer
      * **Default**: 0

   FRAC_VAL (SCF)
      :ref:`apdx:SCF` |w---w| The occupations of the orbital indices specified above (\ :math:`0.0\le {\rm occ} \le 1.0`\ )

      * **Type**: array
      * **Default**: No Default

   EXTERN (SCF)
      :ref:`apdx:SCF` |w---w| An ExternalPotential (built by Python or nullptr/None)

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ONEPOT_GRID_READ (SCF)
      :ref:`apdx:SCF` |w---w| Read an external potential from the .dx file?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PERTURB_DIPOLE (SCF)
      :ref:`apdx:SCF` |w---w| An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions

      * **Type**: array
      * **Default**: No Default

   PERTURB_H (SCF)
      :ref:`apdx:SCF` |w---w| Do perturb the Hamiltonian?

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PERTURB_MAGNITUDE (SCF)
      :ref:`apdx:SCF` |w---w| Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead

      * **Type**: double
      * **Default**: 0.0

   PERTURB_WITH (SCF)
      :ref:`apdx:SCF` |w---w| The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future

      * **Type**: string
      * **Possible Values**: DIPOLE, DIPOLE\_X, DIPOLE\_Y, DIPOLE\_Z, EMBPOT, SPHERE, DX
      * **Default**: DIPOLE

   PHI_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of azimuthal grid points for spherical potential integration

      * **Type**: integer
      * **Default**: 360

   RADIUS (SCF)
      :ref:`apdx:SCF` |w---w| Radius (bohr) of a hard-sphere external potential

      * **Type**: double
      * **Default**: 10.0

   R_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of radial grid points for spherical potential integration

      * **Type**: integer
      * **Default**: 100

   THETA_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of colatitude grid points for spherical potential integration

      * **Type**: integer
      * **Default**: 360

   THICKNESS (SCF)
      :ref:`apdx:SCF` |w---w| Thickness (bohr) of a hard-sphere external potential

      * **Type**: double
      * **Default**: 20.0

   DF_BUMP_R0 (SCF)
      :ref:`apdx:SCF` |w---w| Bump function min radius

      * **Type**: double
      * **Default**: 0.0

   DF_BUMP_R1 (SCF)
      :ref:`apdx:SCF` |w---w| Bump function max radius

      * **Type**: double
      * **Default**: 0.0

   DF_DOMAINS (SCF)
      :ref:`apdx:SCF` |w---w| FastDF geometric fitting domain selection algorithm

      * **Type**: string
      * **Possible Values**: DIATOMIC, SPHERES
      * **Default**: DIATOMIC

   DF_INTS_NUM_THREADS (SCF)
      :ref:`apdx:SCF` |w---w| Number of threads for integrals (may be turned down if memory is an issue). 0 is blank

      * **Type**: integer
      * **Default**: 0

   DF_METRIC (SCF)
      :ref:`apdx:SCF` |w---w| FastDF Fitting Metric

      * **Type**: string
      * **Possible Values**: COULOMB, EWALD, OVERLAP
      * **Default**: COULOMB

   DF_THETA (SCF)
      :ref:`apdx:SCF` |w---w| FastDF SR Ewald metric range separation parameter

      * **Type**: double
      * **Default**: 1.0

   COSX_INTS_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| Screening criteria for integrals and intermediates in COSX

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-11

   COSX_MAXITER_FINAL (SCF)
      :ref:`apdx:SCF` |w---w| Controls SCF iteration behavior for the larger (i.e., final) COSX grid. -1 fully converges the SCF on the final grid if possible, ending early if |scf__maxiter| total SCF iterations are reached (failure). 0 disables the final COSX grid entirely. n runs up to n iterations on the final COSX grid, ending early if SCF convergence is reached (success) or if |scf__maxiter| total SCF iterations are reached (failure).

      * **Type**: integer
      * **Default**: 1

   COSX_RADIAL_POINTS_FINAL (SCF)
      :ref:`apdx:SCF` |w---w| Number of radial points in final COSX grid.

      * **Type**: integer
      * **Default**: 35

   COSX_RADIAL_POINTS_INITIAL (SCF)
      :ref:`apdx:SCF` |w---w| Number of radial points in initial COSX grid.

      * **Type**: integer
      * **Default**: 25

   COSX_SPHERICAL_POINTS_FINAL (SCF)
      :ref:`apdx:SCF` |w---w| Number of spherical points in final COSX grid.

      * **Type**: integer
      * **Default**: 110

   COSX_SPHERICAL_POINTS_INITIAL (SCF)
      :ref:`apdx:SCF` |w---w| Number of spherical points in initial COSX grid.

      * **Type**: integer
      * **Default**: 50

   SAD_D_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence criterion for SCF density in the SAD guess, analogous to |scf__d_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   SAD_E_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence criterion for SCF energy in the SAD guess, analogous to |scf__e_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-5

   DFT_ALPHA (SCF)
      :ref:`apdx:SCF` |w---w| The DFT Exact-exchange parameter

      * **Type**: double
      * **Default**: 0.0

   DFT_ALPHA_C (SCF)
      :ref:`apdx:SCF` |w---w| The DFT Correlation hybrid parameter

      * **Type**: double
      * **Default**: 0.0

   DFT_BASIS_TOLERANCE (SCF)
      :ref:`apdx:SCF` |w---w| DFT basis cutoff.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   DFT_BS_RADIUS_ALPHA (SCF)
      :ref:`apdx:SCF` |w---w| Factor for effective BS radius in radial grid.

      * **Type**: double
      * **Default**: 1.0

   DFT_DISPERSION_PARAMETERS (SCF)
      :ref:`apdx:SCF` |w---w| Parameters defining the dispersion correction. See Table :ref:`-D Functionals <table:dft_disp>` for default values and Table :ref:`Dispersion Corrections <table:dashd>` for the order in which parameters are to be specified in this array option. Unused for functionals constructed by user.

      * **Type**: array
      * **Default**: No Default

   DFT_GRAC_ALPHA (SCF)
      :ref:`apdx:SCF` |w---w| The gradient regularized asymptotic correction alpha value

      * **Type**: double
      * **Default**: 0.5

   DFT_GRAC_BETA (SCF)
      :ref:`apdx:SCF` |w---w| The gradient regularized asymptotic correction beta value

      * **Type**: double
      * **Default**: 40.0

   DFT_GRAC_SHIFT (SCF)
      :ref:`apdx:SCF` |w---w| The gradient regularized asymptotic correction shift value

      * **Type**: double
      * **Default**: 0.0

   DFT_NUCLEAR_SCHEME (SCF)
      :ref:`apdx:SCF` |w---w| Nuclear Scheme.

      * **Type**: string
      * **Possible Values**: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE
      * **Default**: TREUTLER

   DFT_OMEGA (SCF)
      :ref:`apdx:SCF` |w---w| The DFT Range-separation parameter

      * **Type**: double
      * **Default**: 0.0

   DFT_OMEGA_C (SCF)
      :ref:`apdx:SCF` |w---w| The DFT Correlation Range-separation parameter

      * **Type**: double
      * **Default**: 0.0

   DFT_PRUNING_SCHEME (SCF)
      :ref:`apdx:SCF` |w---w| Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ``FLAT`` ``P_GAUSSIAN`` ``D_GAUSSIAN`` ``P_SLATER`` ``D_SLATER`` ``LOG_GAUSSIAN`` ``LOG_SLATER`` prune based on decaying functions (experts only!). The recommended scheme is ``ROBUST``.

      * **Type**: string
      * **Default**: NONE

   DFT_RADIAL_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of radial points.

      * **Type**: integer
      * **Default**: 75

   DFT_RADIAL_SCHEME (SCF)
      :ref:`apdx:SCF` |w---w| Radial Scheme.

      * **Type**: string
      * **Possible Values**: TREUTLER, BECKE, MULTIEXP, EM, MURA
      * **Default**: TREUTLER

   DFT_SPHERICAL_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of spherical points (A :ref:`Lebedev Points <table:lebedevorder>` number).

      * **Type**: integer
      * **Default**: 302

   DFT_SPHERICAL_SCHEME (SCF)
      :ref:`apdx:SCF` |w---w| Spherical Scheme.

      * **Type**: string
      * **Possible Values**: LEBEDEV
      * **Default**: LEBEDEV

   DFT_V2_RHO_CUTOFF (SCF)
      :ref:`apdx:SCF` |w---w| Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance.

      * **Type**: double
      * **Default**: -1.0

   DFT_VV10_B (SCF)
      :ref:`apdx:SCF` |w---w| Define VV10 parameter b

      * **Type**: double
      * **Default**: 0.0

   DFT_VV10_C (SCF)
      :ref:`apdx:SCF` |w---w| Define VV10 parameter C

      * **Type**: double
      * **Default**: 0.0

   DFT_VV10_POSTSCF (SCF)
      :ref:`apdx:SCF` |w---w| post-scf VV10 correction

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DFT_VV10_RADIAL_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of radial points for VV10 NL integration.

      * **Type**: integer
      * **Default**: 50

   DFT_VV10_SPHERICAL_POINTS (SCF)
      :ref:`apdx:SCF` |w---w| Number of spherical points (A :ref:`Lebedev Points <table:lebedevorder>` number) for VV10 NL integration.

      * **Type**: integer
      * **Default**: 146

   LOCAL_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| The convergence on the orbital localization procedure

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-12

   LOCAL_MAXITER (SCF)
      :ref:`apdx:SCF` |w---w| The maxiter on the orbital localization procedure

      * **Type**: integer
      * **Default**: 200

   NL_DISPERSION_PARAMETERS (SCF)
      :ref:`apdx:SCF` |w---w| Parameters defining the -NL/-V dispersion correction. First b, then C

      * **Type**: array
      * **Default**: No Default

   SAVE_UHF_NOS (SCF)
      :ref:`apdx:SCF` |w---w| Save the UHF NOs

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   UHF_NOONS (SCF)
      :ref:`apdx:SCF` |w---w| The number of NOONs to print in a UHF calc

      * **Type**: string
      * **Default**: 3

   TDSCF_COEFF_CUTOFF (SCF)
      :ref:`apdx:SCF` |w---w| Cutoff for printing excitations and de-excitations contributing to each excited state

      * **Type**: double
      * **Default**: 0.1

   TDSCF_GUESS (SCF)
      :ref:`apdx:SCF` |w---w| Guess type, only 'denominators' currently supported

      * **Type**: string
      * **Default**: DENOMINATORS

   TDSCF_MAXITER (SCF)
      :ref:`apdx:SCF` |w---w| Maximum number of TDSCF solver iterations

      * **Type**: integer
      * **Default**: 60

   TDSCF_PRINT (SCF)
      :ref:`apdx:SCF` |w---w| Verbosity level in TDSCF

      * **Type**: integer
      * **Default**: 1

   TDSCF_R_CONVERGENCE (SCF)
      :ref:`apdx:SCF` |w---w| Convergence threshold for the norm of the residual vector. If unset, default based on |scf__d_convergence|.

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   TDSCF_STATES (SCF)
      :ref:`apdx:SCF` |w---w| Number of roots (excited states) we should seek to converge. This can be either an integer (total number of states to seek) or a list (number of states per irrep). The latter is only valid if the system has symmetry. Furthermore, the total number of states will be redistributed among irreps when symmetry is used.

      * **Type**: array
      * **Default**: No Default

   TDSCF_TDA (SCF)
      :ref:`apdx:SCF` |w---w| Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   TDSCF_TDM_PRINT (SCF)
      :ref:`apdx:SCF` |w---w| Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments

      * **Type**: array
      * **Default**: No Default

   TDSCF_TRIPLETS (SCF)
      :ref:`apdx:SCF` |w---w| Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed

      * **Type**: string
      * **Possible Values**: NONE, ALSO, ONLY
      * **Default**: NONE

   WCOMBINE (SCF)
      :ref:`apdx:SCF` |w---w| combine omega exchange and Hartree--Fock exchange into one matrix for efficiency? Disabled until fixed.

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   P (THERMO)
      :ref:`apdx:THERMO` |w---w| Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP.

      * **Type**: double
      * **Default**: 101325

   ROTATIONAL_SYMMETRY_NUMBER (THERMO)
      :ref:`apdx:THERMO` |w---w| Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software.

      * **Type**: integer
      * **Default**: 1

   T (THERMO)
      :ref:`apdx:THERMO` |w---w| Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP.

      * **Type**: double
      * **Default**: 298.15


   CUBIC_BASIS_TOLERANCE (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| CubicScalarGrid basis cutoff. 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   CUBIC_BLOCK_MAX_POINTS (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| CubicScalarGrid maximum number of grid points per evaluation block. 

      * **Type**: integer
      * **Default**: 1000

   DEBUG (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| The amount of information to print to the output file 

      * **Type**: integer
      * **Default**: 0

   DERTYPE (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Derivative level 

      * **Type**: string
      * **Possible Values**: NONE, FIRST, SECOND, RESPONSE
      * **Default**: NONE

   DIE_IF_NOT_CONVERGED (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Psi4 dies if energy does not converge. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DKH_ORDER (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Order of Douglas-Kroll-Hess 

      * **Type**: integer
      * **Default**: 2

   EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way! 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MAT_NUM_COLUMN_PRINT (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Number of columns to print in calls to ``Matrix::print_mat``. 

      * **Type**: integer
      * **Default**: 5

   PARENT_SYMMETRY (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| For displacements, symmetry (Schoenflies symbol) of 'parent' (undisplaced) reference molecule. Internal use only for finite difference. 

      * **Type**: string
      * **Default**: No Default

   RAS1 (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| An array giving the number of orbitals per irrep for RAS1 

      * **Type**: array
      * **Default**: No Default

   RAS2 (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| An array giving the number of orbitals per irrep for RAS2 

      * **Type**: array
      * **Default**: No Default

   RAS3 (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| An array giving the number of orbitals per irrep for RAS3 

      * **Type**: array
      * **Default**: No Default

   RAS4 (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| An array giving the number of orbitals per irrep for RAS4 

      * **Type**: array
      * **Default**: No Default

   RELATIVISTIC (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Relativistic Hamiltonian type 

      * **Type**: string
      * **Possible Values**: NO, X2C
      * **Default**: NO

   WFN (GLOBALS)
      :ref:`apdx:GLOBALS` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   OPDM_ONLY (CCDENSITY)
      :ref:`apdx:CCDENSITY` **(Expert)** |w---w| For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WFN (CCDENSITY)
      :ref:`apdx:CCDENSITY` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   XI_CONNECT (CCDENSITY)
      :ref:`apdx:CCDENSITY` **(Expert)** |w---w| Do require :math:`\bar{H}` and :math:`R` to be connected? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   AO_BASIS (CCENERGY)
      :ref:`apdx:CCENERGY` **(Expert)** |w---w| The algorithm to use for the :math:`\left\langle VV||VV\right\rangle` terms If AO_BASIS is ``NONE``, the MO-basis integrals will be used; if AO_BASIS is ``DISK``, the AO-basis integrals stored on disk will be used; if AO_BASIS is ``DIRECT``, the AO-basis integrals will be computed on the fly as necessary. NB: The ``DIRECT`` option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. 

      * **Type**: string
      * **Possible Values**: NONE, DISK, DIRECT
      * **Default**: NONE

   FORCE_RESTART (CCENERGY)
      :ref:`apdx:CCENERGY` **(Expert)** |w---w| Do restart the coupled-cluster iterations even if MO phases are screwed up? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WFN (CCENERGY)
      :ref:`apdx:CCENERGY` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: NONE

   EXCITATION_RANGE (CCEOM)
      :ref:`apdx:CCEOM` **(Expert)** |w---w| The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation 

      * **Type**: integer
      * **Default**: 2

   WFN (CCEOM)
      :ref:`apdx:CCEOM` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Possible Values**: EOM\_CCSD, EOM\_CC2, EOM\_CC3
      * **Default**: EOM\_CCSD

   WFN (CCHBAR)
      :ref:`apdx:CCHBAR` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   JOBTYPE (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` **(Expert)** |w---w| Type of job being performed 

      * **Type**: string
      * **Default**: No Default

   WFN (CCLAMBDA)
      :ref:`apdx:CCLAMBDA` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   WFN (CCRESPONSE)
      :ref:`apdx:CCRESPONSE` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   WFN (CCTRANSORT)
      :ref:`apdx:CCTRANSORT` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: No Default

   WFN (CCTRIPLES)
      :ref:`apdx:CCTRIPLES` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Default**: SCF

   CFOUR_OMP_NUM_THREADS (CFOUR)
      :ref:`apdx:CFOUR` **(Expert)** |w---w| Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable :envvar:`OMP_NUM_THREADS` is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the ``-n`` command-line option described in section :ref:`sec:threading` does not affect CFOUR. 

      * **Type**: integer
      * **Default**: 1

   CACHELEVEL (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Controls how to cache quantities within the DPD library 

      * **Type**: integer
      * **Default**: 2

   DAMPING_PERCENTAGE (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20\% of the previous iteration's density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. 

      * **Type**: double
      * **Default**: 0.0

   DCT_GUESS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Whether to read the orbitals from a previous computation, or to compute an MP2 guess. 

      * **Type**: string
      * **Possible Values**: CC, BCC, MP2, DCT
      * **Default**: MP2

   DIIS_MAX_VECS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Maximum number of error vectors stored for DIIS extrapolation 

      * **Type**: integer
      * **Default**: 6

   DIIS_MIN_VECS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Minimum number of error vectors stored for DIIS extrapolation 

      * **Type**: integer
      * **Default**: 3

   ENERGY_LEVEL_SHIFT (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. 

      * **Type**: double
      * **Default**: 0.0

   INTS_TOLERANCE (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Schwarz screening threshold. Mininum absolute value below which TEI are neglected. 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-14

   ORBITAL_LEVEL_SHIFT (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The shift applied to the denominator in the orbital update iterations 

      * **Type**: double
      * **Default**: 0.0

   RELAX_GUESS_ORBITALS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only) 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   STABILITY_ADD_VECTORS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The number of vectors that can be added simultaneously into the subspace for Davidson's diagonalization in stability check 

      * **Type**: integer
      * **Default**: 20

   STABILITY_AUGMENT_SPACE_TOL (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 0.1

   STABILITY_CHECK (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Performs stability analysis of the DCT energy 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   STABILITY_CONVERGENCE (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| Controls the convergence of the Davidson's diagonalization in stability check 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-4

   STABILITY_MAX_SPACE_SIZE (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied 

      * **Type**: integer
      * **Default**: 200

   STABILITY_N_EIGENVALUES (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The number of Hessian eigenvalues computed during the stability check 

      * **Type**: integer
      * **Default**: 3

   STABILITY_N_GUESS_VECTORS (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The number of guess vectors used for Davidson's diagonalization in stability check 

      * **Type**: integer
      * **Default**: 20

   TIKHONOW_OMEGA (DCT)
      :ref:`apdx:DCT` **(Expert)** |w---w| The shift applied to the denominator in the density cumulant update iterations 

      * **Type**: double
      * **Default**: 0.0

   DDX_ETA (DDX)
      :ref:`apdx:DDX` **(Expert)** |w---w| Regularization parameter for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [0, 1]. 

      * **Type**: double
      * **Default**: 0.1

   DDX_LOGFILE (DDX)
      :ref:`apdx:DDX` **(Expert)** |w---w| Logfile to dump a full trace of the DDX solver history for debugging. 

      * **Type**: string
      * **Default**: No Default

   DDX_SHIFT (DDX)
      :ref:`apdx:DDX` **(Expert)** |w---w| Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. 

      * **Type**: double
      * **Default**: -100.0

   CI_NUM_THREADS (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Number of threads for DETCI. 

      * **Type**: integer
      * **Default**: 1

   EX_ALLOW (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| An array of length |detci__ex_level| specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. 

      * **Type**: array
      * **Default**: No Default

   MIXED (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do allow "mixed" RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level |detci__ex_level|. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   MIXED4 (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do allow "mixed" excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level |detci__ex_level|. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   R4S (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do restrict strings with :math:`e-` in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., |detci__ex_level|), or else the string is discarded. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SF_RESTRICT (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do eliminate determinants not valid for spin-complete spin-flip CI's? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)] 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SIGMA_OVERLAP (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do print the sigma overlap matrix? Not generally useful. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   WFN (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Wavefunction type. This should be set automatically from the calling Psithon function. 

      * **Type**: string
      * **Possible Values**: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF
      * **Default**: DETCI

   H0_BLOCKSIZE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if |detci__guess_vector| is ``H0_BLOCK``. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (|detci__ms0| is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. 

      * **Type**: integer
      * **Default**: 1000

   H0_BLOCK_COUPLING (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do use coupling block in preconditioner? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   H0_BLOCK_COUPLING_SIZE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. 

      * **Type**: integer
      * **Default**: 0

   H0_GUESS_SIZE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| size of H0 block for initial guess 

      * **Type**: integer
      * **Default**: 1000

   HD_AVG (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| How to average H diag energies over spin coupling sets. ``HD_EXACT`` uses the exact diagonal energies which results in expansion vectors which break spin symmetry. ``HD_KAVE`` averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ``ORB_ENER`` employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. ``EVANGELISTI`` uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. ``LEININGER`` approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as ``EVANGELISTI``. 

      * **Type**: string
      * **Possible Values**: EVANGELISTI, HD\_EXACT, HD\_KAVE, ORB\_ENER, LEININGER, Z\_KAVE
      * **Default**: EVANGELISTI

   TPDM (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM's in memory 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FOLLOW_VECTOR (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| In following a particular root (see |detci__follow_root|), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. 

      * **Type**: array
      * **Default**: No Default

   CI_FILE_START (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer. 

      * **Type**: integer
      * **Default**: 350

   FILTER_GUESS (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords |detci__filter_guess_det1|, |detci__filter_guess_det2|, and |detci__filter_guess_sign|. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FILTER_GUESS_DET1 (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See |detci__filter_guess|). 

      * **Type**: array
      * **Default**: No Default

   FILTER_GUESS_DET2 (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See |detci__filter_guess|). 

      * **Type**: array
      * **Default**: No Default

   FILTER_GUESS_SIGN (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| The required phase (1 or -1) between the two determinants specified by |detci__filter_guess_det1| and |detci__filter_guess_det2|. 

      * **Type**: integer
      * **Default**: 1

   FILTER_ZERO_DET (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. 

      * **Type**: array
      * **Default**: No Default

   GUESS_VECTOR (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Guess vector type. Accepted values are ``UNIT`` for a unit vector guess (|detci__num_roots| and |detci__num_init_vecs| must both be 1); ``H0_BLOCK`` to use eigenvectors from the H0 BLOCK submatrix (default); ``DFILE`` to use NUM_ROOTS previously converged vectors in the D file; 

      * **Type**: string
      * **Possible Values**: UNIT, H0\_BLOCK, DFILE
      * **Default**: H0\_BLOCK

   NUM_INIT_VECS (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots. 

      * **Type**: integer
      * **Default**: 0

   REFERENCE_SYM (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. 

      * **Type**: integer
      * **Default**: -1

   HD_OTF (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   NO_DFILE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if |detci__num_roots| = 1.) 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MPN_ORDER_SAVE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from |detci__mpn_wigner| = true); if 2, save the MP(2n-2) energy (if available from |detci__mpn_wigner| = true). 

      * **Type**: integer
      * **Default**: 0

   MPN_SCHMIDT (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do employ an orthonormal vector space rather than storing the kth order wavefunction? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MPN_WIGNER (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do use Wigner formulas in the :math:`E_{text{mp}n}` series? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   PERTURB_MAGNITUDE (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| The magnitude of perturbation :math:`z` in :math:`H = H_0 + z H_1` 

      * **Type**: double
      * **Default**: 1.0

   CC_FIX_EXTERNAL (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CC_FIX_EXTERNAL_MIN (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Number of external indices before amplitude gets fixed by |detci__cc_fix_external|. Experimental. 

      * **Type**: integer
      * **Default**: 1

   CC_MACRO (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], ... ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_holes_I holes in RAS I, there are more than max_parts_IV particles in RAS IV, OR there are more than max_I+IV quasiparticles in RAS I + RAS IV]. 

      * **Type**: array
      * **Default**: No Default

   CC_MIXED (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do ignore block if num holes in RAS I and II is :math:`>` cc_ex_lvl and if any indices correspond to RAS I or IV (i.e., include only all-active higher excitations)? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CC_UPDATE_EPS (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   CC_VARIATIONAL (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do use variational energy expression in CC computation? Experimental. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   BENDAZZOLI (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don't remember if I could see how their clever scheme might be extended to RAS in general. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   FCI_STRINGS (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do store strings specifically for FCI? (Defaults to TRUE for FCI.) 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   REPL_OTF (DETCI)
      :ref:`apdx:DETCI` **(Expert)** |w---w| Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI's) but is somewhat flaky and hasn't been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DF_INTS_IO (DFMP2)
      :ref:`apdx:DFMP2` **(Expert)** |w---w| IO caching for CP corrections, etc 

      * **Type**: string
      * **Possible Values**: NONE, SAVE, LOAD
      * **Default**: NONE

   MADMP2_SLEEP (DFMP2)
      :ref:`apdx:DFMP2` **(Expert)** |w---w| A helpful option, used only in debugging the MADNESS version 

      * **Type**: integer
      * **Default**: 0

   F_CUT (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations 

      * **Type**: double
      * **Default**: 1e-5

   S_CUT (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Overlap matrix threshold for removing linear dependencies 

      * **Type**: double
      * **Default**: 1e-8

   T_CUT_CLMO (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Basis set coefficient threshold for including basis function (m) in domain of LMO (i) 

      * **Type**: double
      * **Default**: 1e-2

   T_CUT_CPAO (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Basis set coefficient threshold for including basis function (n) in domain of PAO (u) 

      * **Type**: double
      * **Default**: 1e-3

   T_CUT_DO (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| DOI threshold for including PAO (u) in domain of LMO (i) 

      * **Type**: double
      * **Default**: 1e-2

   T_CUT_DO_PRE (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening 

      * **Type**: double
      * **Default**: 3e-2

   T_CUT_DO_IJ (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| DOI threshold for treating LMOs (i,j) as interacting 

      * **Type**: double
      * **Default**: 1e-5

   T_CUT_MKN (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i) 

      * **Type**: double
      * **Default**: 1e-3

   T_CUT_PNO (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Occupation number threshold for removing PNOs 

      * **Type**: double
      * **Default**: 1e-8

   T_CUT_PRE (DLPNO)
      :ref:`apdx:DLPNO` **(Expert)** |w---w| Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting 

      * **Type**: double
      * **Default**: 1e-6

   DERTYPE (EFP)
      :ref:`apdx:EFP` **(Expert)** |w---w| Do EFP gradient? 

      * **Type**: string
      * **Possible Values**: NONE, FIRST
      * **Default**: NONE

   QMEFP (EFP)
      :ref:`apdx:EFP` **(Expert)** |w---w| Do turn on QM/EFP terms? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   CUBIC_BASIS_TOLERANCE (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| CubicScalarGrid basis cutoff. 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-12

   CUBIC_BLOCK_MAX_POINTS (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| CubicScalarGrid maximum number of grid points per evaluation block. 

      * **Type**: integer
      * **Default**: 1000

   FISAPT_MEM_SAFETY_FACTOR (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| Memory safety factor for heavy FISAPT operations 

      * **Type**: double
      * **Default**: 0.9

   LOCAL_IBO_CONDITION (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| Condition number to use in IBO metric inversions 

      * **Type**: double
      * **Default**: 1.0e-7

   LOCAL_USE_GHOSTS (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| Use ghost atoms in Pipek-Mezey or IBO metric 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   MINAO_BASIS (FISAPT)
      :ref:`apdx:FISAPT` **(Expert)** |w---w| MinAO Basis for IBO 

      * **Type**: string
      * **Default**: CC-PVTZ-MINAO

   CEPA_LEVEL (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won't have any effect on the procedure. 

      * **Type**: string
      * **Default**: CEPA(0)

   COMPUTE_MP4_TRIPLES (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| Do compute MP4 triples contribution? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   COMPUTE_TRIPLES (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| Do compute triples contribution? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   RUN_CCSD (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| do ccsd rather than qcisd? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RUN_CEPA (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won't have any effect on the procedure. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RUN_MP2 (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| do only evaluate mp2 energy? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RUN_MP3 (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| do only evaluate mp3 energy? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   RUN_MP4 (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| do only evaluate mp4 energy? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   USE_DF_INTS (FNOCC)
      :ref:`apdx:FNOCC` **(Expert)** |w---w| Use 3-index integrals to generate 4-index ERI's? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   ROTATE_MO_ANGLE (MCSCF)
      :ref:`apdx:MCSCF` **(Expert)** |w---w| For orbital rotations after convergence, the angle (in degrees) by which to rotate. 

      * **Type**: double
      * **Default**: 0.0

   ROTATE_MO_IRREP (MCSCF)
      :ref:`apdx:MCSCF` **(Expert)** |w---w| For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. 

      * **Type**: integer
      * **Default**: 1

   ROTATE_MO_P (MCSCF)
      :ref:`apdx:MCSCF` **(Expert)** |w---w| For orbital rotations after convergence, number of the first orbital (1-based) to rotate. 

      * **Type**: integer
      * **Default**: 1

   ROTATE_MO_Q (MCSCF)
      :ref:`apdx:MCSCF` **(Expert)** |w---w| For orbital rotations after convergence, number of the second orbital (1-based) to rotate. 

      * **Type**: integer
      * **Default**: 2

   MRCC_METHOD (MRCC)
      :ref:`apdx:MRCC` **(Expert)** |w---w| If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with :py:func:`~psi4.driver.energy`. This becomes ``CC/CI`` (option \#5) in fort.56. See Table :ref:`MRCC_METHOD <table:mrcc__mrcc_method>` for details. 

      * **Type**: integer
      * **Default**: 1

   MRCC_OMP_NUM_THREADS (MRCC)
      :ref:`apdx:MRCC` **(Expert)** |w---w| Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable :envvar:`OMP_NUM_THREADS` is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the ``-n`` command-line option described in section :ref:`sec:threading` does not affect MRCC. 

      * **Type**: integer
      * **Default**: 1

   MRCC_RESTART (MRCC)
      :ref:`apdx:MRCC` **(Expert)** |w---w| The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes ``rest`` (option \#4) in fort.56. 

      * **Type**: integer
      * **Default**: 0

   SPIN_SCALE_TYPE (OCC)
      :ref:`apdx:OCC` **(Expert)** |w---w| Controls the spin scaling set to current energy. This is set by Psi internally. 

      * **Type**: string
      * **Possible Values**: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI
      * **Default**: NONE

   PCMSOLVER_PARSED_FNAME (PCM)
      :ref:`apdx:PCM` **(Expert)** |w---w| Name of the PCMSolver input file as parsed by pcmsolver.py 

      * **Type**: string
      * **Default**: No Default

   PCM_SCF_TYPE (PCM)
      :ref:`apdx:PCM` **(Expert)** |w---w| Use total or separate potentials and charges in the PCM-SCF step. 

      * **Type**: string
      * **Possible Values**: TOTAL, SEPARATE
      * **Default**: TOTAL

   TIKHONOW_TRIPLES (PSIMRCC)
      :ref:`apdx:PSIMRCC` **(Expert)** |w---w| Do use Tikhonow regularization in (T) computations? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   USE_SPIN_SYMMETRY (PSIMRCC)
      :ref:`apdx:PSIMRCC` **(Expert)** |w---w| Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   COUPLED_INDUCTION (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_CCD_DISP (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_DISP_EXCH_SINF (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_IND30_EXCH_SINF (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT2+3, compute the non-approximated third-order exchange-induction term. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_IND_EXCH_SINF (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   DO_MBPT_DISP (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DO_THIRD_ORDER (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Do compute third-order corrections? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SAPT0_E10 (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SAPT0_E20DISP (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SAPT0_E20IND (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   SAPT_MEM_FACTOR (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. 

      * **Type**: double
      * **Default**: 0.9

   SAPT_DFT_DO_HYBRID (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Enables the hybrid xc kernel in dispersion? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SAPT_DFT_EXCH_DISP_FIXED_SCALE (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Exch-disp scaling factor for FIXED scheme for |sapt__sapt_dft_exch_disp_scale_scheme|. Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). 

      * **Type**: double
      * **Default**: 0.770

   SAPT_DFT_FUNCTIONAL (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Underlying funcitonal to use for SAPT(DFT) 

      * **Type**: string
      * **Default**: PBE0

   SAPT_DFT_GRAC_DETERMINATION (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| How is the GRAC correction determined? 

      * **Type**: string
      * **Possible Values**: INPUT
      * **Default**: INPUT

   SAPT_DFT_MP2_DISP_ALG (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Which MP2 Exch-Disp module to use? 

      * **Type**: string
      * **Possible Values**: FISAPT, SAPT
      * **Default**: SAPT

   SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Lambda shift in the space morphing for the FDDS Dispersion time integration 

      * **Type**: double
      * **Default**: 0.3

   SAPT_FDDS_DISP_NUM_POINTS (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Number of points in the Legendre FDDS Dispersion time integration 

      * **Type**: integer
      * **Default**: 10

   SAPT_FDDS_V2_RHO_CUTOFF (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Minimum rho cutoff for the in the LDA response for FDDS 

      * **Type**: double
      * **Default**: 1.e-6

   SAPT_QUIET (SAPT)
      :ref:`apdx:SAPT` **(Expert)** |w---w| Interior option to clean up printing 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PK_ALL_NONSYM (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| All densities are considered non symmetric, debug only. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PK_MAX_BUCKETS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Maximum numbers of batches to read PK supermatrix. 

      * **Type**: integer
      * **Default**: 500

   SCF_SUBTYPE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| For certain |globals__scf_type| algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (``AUTO`` ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, ``SCF_SUBTYPE=DF``, ``SCF_SUBTYPE=MEM_DF``, and ``SCF_SUBTYPE=DISK_DF`` 	 can have ``INCORE`` and ``OUT_OF_CORE`` selected; and ``SCF_TYPE=PK`` can have ``INCORE``,	 ``OUT_OF_CORE``, ``YOSHIMINE_OUT_OF_CORE``, and ``REORDER_OUT_OF_CORE`` selected. 

      * **Type**: string
      * **Possible Values**: AUTO, INCORE, OUT\_OF\_CORE, YOSHIMINE\_OUT\_OF\_CORE, REORDER\_OUT\_OF\_CORE
      * **Default**: AUTO

   WFN (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Wavefunction type 

      * **Type**: string
      * **Possible Values**: SCF
      * **Default**: SCF

   FOLLOW_STEP_INCREMENT (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| When using STABILITY_ANALYSIS = FOLLOW, the increment to modify |scf__follow_step_scale| value if we end up in the same SCF solution. 

      * **Type**: double
      * **Default**: 0.2

   FOLLOW_STEP_SCALE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| When using |scf__stability_analysis| ``FOLLOW``, how much to scale the step along the eigenvector by. A full step of :math:`pi/2` corresponds to a value of 1.0. 

      * **Type**: double
      * **Default**: 0.5

   MAX_ATTEMPTS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| When using |scf__stability_analysis| ``FOLLOW``, maximum number of orbital optimization attempts to make the wavefunction stable. 

      * **Type**: integer
      * **Default**: 1

   DISTRIBUTED_MATRIX (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The dimension sizes of the distributed matrix 

      * **Type**: array
      * **Default**: No Default

   PARALLEL (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Do run in parallel? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: false

   PROCESS_GRID (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The dimension sizes of the processor grid 

      * **Type**: array
      * **Default**: No Default

   TILE_SZ (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The tile size for the distributed matrices 

      * **Type**: integer
      * **Default**: 512

   SAPT (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Are going to do SAPT? If so, what part? 

      * **Type**: string
      * **Default**: FALSE

   DF_FITTING_CONDITION (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous to S_TOLERANCE 

      * **Type**: double
      * **Default**: 1.0e-10

   DF_INTS_IO (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| IO caching for CP corrections, etc 

      * **Type**: string
      * **Possible Values**: NONE, SAVE, LOAD
      * **Default**: NONE

   COSX_BASIS_TOLERANCE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Screening criteria for basis function values on COSX grids 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-10

   COSX_DENSITY_TOLERANCE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Screening criteria for shell-pair densities in COSX 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-10

   COSX_OVERLAP_FITTING (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Do reduce numerical COSX errors with overlap fitting? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   COSX_PRUNING_SCHEME (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Pruning scheme for COSX grids 

      * **Type**: string
      * **Default**: ROBUST

   DF_BASIS_SAD (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Density fitting basis used in SAD 

      * **Type**: string
      * **Possible Values**: :ref:`basis string <apdx:basisElement>`
      * **Default**: SAD-FIT

   SAD_CHOL_TOLERANCE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| SAD guess density decomposition threshold 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1e-7

   SAD_FRAC_OCC (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Do force an even distribution of occupations across the last partially occupied orbital shell? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   SAD_MAXITER (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Maximum number of atomic SCF iterations within SAD 

      * **Type**: integer
      * **Default**: 50

   SAD_PRINT (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The amount of SAD information to print to the output 

      * **Type**: integer
      * **Default**: 0

   SAD_SCF_TYPE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| SCF type used for atomic calculations in SAD guess 

      * **Type**: string
      * **Possible Values**: DIRECT, DF, MEM\_DF, DISK\_DF, PK, OUT\_OF\_CORE, CD, GTFOCK
      * **Default**: DF

   SAD_SPIN_AVERAGE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD? 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DFT_BLOCK_MAX_POINTS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The maximum number of grid points per evaluation block. 

      * **Type**: integer
      * **Default**: 256

   DFT_BLOCK_MAX_RADIUS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The maximum radius to terminate subdivision of an octree block [au]. 

      * **Type**: double
      * **Default**: 3.0

   DFT_BLOCK_MIN_POINTS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The minimum number of grid points per evaluation block. 

      * **Type**: integer
      * **Default**: 100

   DFT_BLOCK_SCHEME (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The blocking scheme for DFT. 

      * **Type**: string
      * **Possible Values**: NAIVE, OCTREE, ATOMIC
      * **Default**: OCTREE

   DFT_DENSITY_TOLERANCE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: -1.0

   DFT_GRAC_C_FUNC (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The gradient regularized asymptotic correction functional corr form. 

      * **Type**: string
      * **Default**: XC\_LDA\_C\_VWN

   DFT_GRAC_X_FUNC (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The gradient regularized asymptotic correction functional exch form. 

      * **Type**: string
      * **Default**: XC\_GGA\_X\_LB

   DFT_GRID_NAME (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| The DFT grid specification, such as SG1.

      * **Type**: string
      * **Possible Values**: SG0, SG1
      * **Default**: No Default

   DFT_PRUNING_ALPHA (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Spread alpha for logarithmic pruning. 

      * **Type**: double
      * **Default**: 1.0

   DFT_REMOVE_DISTANT_POINTS (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Remove points from the quadrature grid that exceed the spatial extend of the basis functions. 

      * **Type**: :ref:`boolean <op_c_boolean>`
      * **Default**: true

   DFT_VV10_RHO_CUTOFF (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| Rho cutoff for VV10 NL integration. 

      * **Type**: double
      * **Default**: 1.e-8

   DFT_WEIGHTS_TOLERANCE (SCF)
      :ref:`apdx:SCF` **(Expert)** |w---w| grid weight cutoff. Disable with -1.0. 

      * **Type**: :ref:`conv double <op_c_conv>`
      * **Default**: 1.0e-15


